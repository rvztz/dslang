Grammar:

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID add_pid SCOLON progitem
Rule 2     progitem -> main programdv
Rule 3     progitem -> function programdv
Rule 4     progitem -> vars programdv
Rule 5     progitem -> statement programdv
Rule 6     programdv -> empty
Rule 7     programdv -> progitem
Rule 8     main -> MAIN LPAREN RPAREN LCURL maindv
Rule 9     maindv -> RCURL
Rule 10    maindv -> statement maindv
Rule 11    maindv -> vars maindv
Rule 12    vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype
Rule 13    vtype -> TSTR
Rule 14    vtype -> TFLT
Rule 15    vtype -> TINT
Rule 16    vtype -> TBOOL
Rule 17    listids -> ID LBRCKT CTEINT RBRCKT store_arrid dimlist def_dims listdv
Rule 18    listids -> ID store_varid listdv
Rule 19    dimlist -> empty
Rule 20    dimlist -> LBRCKT CTEINT RBRCKT append_dim dimlist
Rule 21    listdv -> empty
Rule 22    listdv -> COMMA listids
Rule 23    function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
Rule 24    typefunc -> VOID
Rule 25    typefunc -> vtype
Rule 26    funcparams -> empty
Rule 27    funcparams -> params
Rule 28    params -> vtype ID save_param paramsdv
Rule 29    paramsdv -> empty
Rule 30    paramsdv -> COMMA params
Rule 31    funcstat -> RCURL
Rule 32    funcstat -> statement funcstat
Rule 33    funcstat -> vars funcstat
Rule 34    statement -> rreturn SCOLON
Rule 35    statement -> wwhile
Rule 36    statement -> cond
Rule 37    statement -> pprint SCOLON
Rule 38    statement -> read SCOLON
Rule 39    statement -> funccall SCOLON
Rule 40    statement -> shrtassgn SCOLON
Rule 41    statement -> assign SCOLON
Rule 42    statement -> expr
Rule 43    expr -> exprdv
Rule 44    exprdv -> bexp check_expr_st
Rule 45    exprdv -> bexp OR add_oper exprdv check_expr_st
Rule 46    exprdv -> bexp AND add_oper exprdv check_expr_st
Rule 47    bexp -> asexp check_bexp_st
Rule 48    bexp -> asexp GTEQ add_oper bexp check_bexp_st
Rule 49    bexp -> asexp LTEQ add_oper bexp check_bexp_st
Rule 50    bexp -> asexp NOTEQ add_oper bexp check_bexp_st
Rule 51    bexp -> asexp EQ add_oper bexp check_bexp_st
Rule 52    bexp -> asexp GT add_oper bexp check_bexp_st
Rule 53    bexp -> asexp LT add_oper bexp check_bexp_st
Rule 54    asexp -> emdexp check_asexp_st
Rule 55    asexp -> emdexp SUB add_oper asexp check_asexp_st  [precedence=left, level=1]
Rule 56    asexp -> emdexp ADD add_oper asexp check_asexp_st  [precedence=left, level=1]
Rule 57    emdexp -> pexp check_emdexp_st
Rule 58    emdexp -> pexp FDIV add_oper emdexp check_emdexp_st
Rule 59    emdexp -> pexp DIV add_oper emdexp check_emdexp_st  [precedence=left, level=2]
Rule 60    emdexp -> pexp MULT add_oper emdexp check_emdexp_st  [precedence=left, level=2]
Rule 61    emdexp -> pexp EXP add_oper emdexp check_emdexp_st
Rule 62    pexp -> funccall add_funcv
Rule 63    pexp -> varidx gen_tidx
Rule 64    pexp -> ID add_vid
Rule 65    pexp -> const save_const
Rule 66    pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
Rule 67    assign -> varidx gen_fidx ASGN expr gen_idx_assign
Rule 68    assign -> ID ASGN expr gen_assign
Rule 69    shrtassgn -> ID SHRT expr gen_shrt_assign
Rule 70    funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
Rule 71    fcallparams -> empty
Rule 72    fcallparams -> fcallterm fcallparamdv
Rule 73    fcallparamdv -> empty
Rule 74    fcallparamdv -> COMMA fcallparams
Rule 75    fcallterm -> expr add_params
Rule 76    read -> READ LPAREN varidx gen_fidx gen_idxread RPAREN
Rule 77    read -> READ LPAREN ID RPAREN gen_read
Rule 78    pprint -> PRINT LPAREN printlist RPAREN gen_print_quads
Rule 79    printlist -> printerm printlistdv
Rule 80    printlistdv -> empty
Rule 81    printlistdv -> COMMA printlist
Rule 82    printerm -> CTESTR push_printct
Rule 83    printerm -> varidx gen_fidx push_printidl
Rule 84    printerm -> CTEFLT push_printct
Rule 85    printerm -> CTEINT push_printct
Rule 86    printerm -> ID push_printid
Rule 87    cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
Rule 88    cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
Rule 89    condst -> statement condstdv
Rule 90    condstdv -> empty
Rule 91    condstdv -> condst
Rule 92    wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
Rule 93    whiledv -> RCURL
Rule 94    whiledv -> statement whiledv
Rule 95    rreturn -> RETURN expr check_return
Rule 96    const -> CTESTR
Rule 97    const -> CTEINT
Rule 98    const -> CTEFLT
Rule 99    const -> FALSE
Rule 100   const -> TRUE
Rule 101   varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
Rule 102   arrindex -> empty
Rule 103   arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
Rule 104   empty -> <empty>
Rule 105   add_pid -> <empty>
Rule 106   add_cvtype -> <empty>
Rule 107   reset_vtype -> <empty>
Rule 108   store_varid -> <empty>
Rule 109   store_arrid -> <empty>
Rule 110   append_dim -> <empty>
Rule 111   def_dims -> <empty>
Rule 112   save_const -> <empty>
Rule 113   add_vid -> <empty>
Rule 114   validate_arr -> <empty>
Rule 115   gen_vdim -> <empty>
Rule 116   gen_tidx -> <empty>
Rule 117   gen_fidx -> <empty>
Rule 118   add_oper -> <empty>
Rule 119   check_expr_st -> <empty>
Rule 120   check_bexp_st -> <empty>
Rule 121   check_asexp_st -> <empty>
Rule 122   check_emdexp_st -> <empty>
Rule 123   push_oper_ctx -> <empty>
Rule 124   pop_oper_ctx -> <empty>
Rule 125   gen_assign -> <empty>
Rule 126   gen_idx_assign -> <empty>
Rule 127   gen_shrt_assign -> <empty>
Rule 128   gen_read -> <empty>
Rule 129   gen_idxread -> <empty>
Rule 130   push_printid -> <empty>
Rule 131   push_printidl -> <empty>
Rule 132   push_printct -> <empty>
Rule 133   gen_print_quads -> <empty>
Rule 134   gen_cond_quad -> <empty>
Rule 135   add_jquad -> <empty>
Rule 136   gen_egoto -> <empty>
Rule 137   add_wpquad -> <empty>
Rule 138   gen_wquad -> <empty>
Rule 139   add_wquad -> <empty>
Rule 140   save_func -> <empty>
Rule 141   save_param -> <empty>
Rule 142   add_fqid -> <empty>
Rule 143   check_return -> <empty>
Rule 144   remove_fscope -> <empty>
Rule 145   validate_fid -> <empty>
Rule 146   add_funcv -> <empty>
Rule 147   add_params -> <empty>
Rule 148   add_curr_pquad -> <empty>

Unused terminals:

    PLOT
    FOR
    TO
    DFRAME

Terminals, with rules where they appear:

ADD                  : 56
AND                  : 46
ASGN                 : 67 68
COLON                : 12
COMMA                : 22 30 74 81
CTEFLT               : 84 98
CTEINT               : 17 20 85 97
CTESTR               : 82 96
DFRAME               : 
DIV                  : 59
DO                   : 92
ELSE                 : 87
EQ                   : 51
EXP                  : 61
FALSE                : 99
FCALL                : 70
FDIV                 : 58
FOR                  : 
FUNCTION             : 23
GT                   : 52
GTEQ                 : 48
ID                   : 1 17 18 23 28 64 68 69 70 77 86 101
IF                   : 87 88
LBRCKT               : 17 20 101 103
LCURL                : 8 23 87 87 88 92
LPAREN               : 8 23 66 70 76 77 78 87 88 92
LT                   : 53
LTEQ                 : 49
MAIN                 : 8
MULT                 : 60
NOTEQ                : 50
OR                   : 45
PLOT                 : 
PRINT                : 78
PROGRAM              : 1
RBRCKT               : 17 20 101 103
RCURL                : 9 31 87 87 88 93
READ                 : 76 77
RETURN               : 95
RPAREN               : 8 23 66 70 76 77 78 87 88 92
SCOLON               : 1 12 34 37 38 39 40 41
SHRT                 : 69
SUB                  : 55
TBOOL                : 16
TFLT                 : 14
TINT                 : 15
TO                   : 
TRUE                 : 100
TSTR                 : 13
VAR                  : 12
VOID                 : 24
WHILE                : 92
error                : 

Nonterminals, with rules where they appear:

add_curr_pquad       : 70
add_cvtype           : 12
add_fqid             : 23
add_funcv            : 62
add_jquad            : 87 88
add_oper             : 45 46 48 49 50 51 52 53 55 56 58 59 60 61
add_params           : 75
add_pid              : 1
add_vid              : 64
add_wpquad           : 92
add_wquad            : 92
append_dim           : 20
arrindex             : 101 103
asexp                : 47 48 49 50 51 52 53 55 56
assign               : 41
bexp                 : 44 45 46 48 49 50 51 52 53
check_asexp_st       : 54 55 56
check_bexp_st        : 47 48 49 50 51 52 53
check_emdexp_st      : 57 58 59 60 61
check_expr_st        : 44 45 46
check_return         : 95
cond                 : 36
condst               : 87 87 88 91
condstdv             : 89
const                : 65
def_dims             : 17
dimlist              : 17 20
emdexp               : 54 55 56 58 59 60 61
empty                : 6 19 21 26 29 71 73 80 90 102
expr                 : 42 67 68 69 75 87 88 92 95 101 103
exprdv               : 43 45 46 66
fcallparamdv         : 72
fcallparams          : 70 74
fcallterm            : 72
funccall             : 39 62
funcparams           : 23
funcstat             : 23 32 33
function             : 3
gen_assign           : 68
gen_cond_quad        : 87 88
gen_egoto            : 87
gen_fidx             : 67 76 83
gen_idx_assign       : 67
gen_idxread          : 76
gen_print_quads      : 78
gen_read             : 77
gen_shrt_assign      : 69
gen_tidx             : 63
gen_vdim             : 101 103
gen_wquad            : 92
listdv               : 17 18
listids              : 12 22
main                 : 2
maindv               : 8 10 11
params               : 27 30
paramsdv             : 28
pexp                 : 57 58 59 60 61
pop_oper_ctx         : 66 70 101 103
pprint               : 37
printerm             : 79
printlist            : 78 81
printlistdv          : 79
progitem             : 1 7
program              : 0
programdv            : 2 3 4 5
push_oper_ctx        : 66 70 101 103
push_printct         : 82 84 85
push_printid         : 86
push_printidl        : 83
read                 : 38
remove_fscope        : 23
reset_vtype          : 12
rreturn              : 34
save_const           : 65
save_func            : 23
save_param           : 28
shrtassgn            : 40
statement            : 5 10 32 89 94
store_arrid          : 17
store_varid          : 18
typefunc             : 23
validate_arr         : 101
validate_fid         : 70
varidx               : 63 67 76 83
vars                 : 4 11 33
vtype                : 12 25 28
whiledv              : 92 94
wwhile               : 35


state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID add_pid SCOLON progitem
    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> PROGRAM . ID add_pid SCOLON progitem
    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . add_pid SCOLON progitem
    (105) add_pid -> .
    SCOLON          reduce using rule 105 (add_pid -> .)

    add_pid                        shift and go to state 4

state 4

    (1) program -> PROGRAM ID add_pid . SCOLON progitem
    SCOLON          shift and go to state 5


state 5

    (1) program -> PROGRAM ID add_pid SCOLON . progitem
    (2) progitem -> . main programdv
    (3) progitem -> . function programdv
    (4) progitem -> . vars programdv
    (5) progitem -> . statement programdv
    (8) main -> . MAIN LPAREN RPAREN LCURL maindv
    (23) function -> . FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 14
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    progitem                       shift and go to state 7
    main                           shift and go to state 8
    function                       shift and go to state 9
    vars                           shift and go to state 10
    statement                      shift and go to state 11
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 6

    (70) funccall -> ID . FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> ID . SHRT expr gen_shrt_assign
    (68) assign -> ID . ASGN expr gen_assign
    (101) varidx -> ID . LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (64) pexp -> ID . add_vid
    (113) add_vid -> .
    FCALL           shift and go to state 42
    SHRT            shift and go to state 43
    ASGN            shift and go to state 44
    LBRCKT          shift and go to state 45
    FDIV            reduce using rule 113 (add_vid -> .)
    DIV             reduce using rule 113 (add_vid -> .)
    MULT            reduce using rule 113 (add_vid -> .)
    EXP             reduce using rule 113 (add_vid -> .)
    SUB             reduce using rule 113 (add_vid -> .)
    ADD             reduce using rule 113 (add_vid -> .)
    GTEQ            reduce using rule 113 (add_vid -> .)
    LTEQ            reduce using rule 113 (add_vid -> .)
    NOTEQ           reduce using rule 113 (add_vid -> .)
    EQ              reduce using rule 113 (add_vid -> .)
    GT              reduce using rule 113 (add_vid -> .)
    LT              reduce using rule 113 (add_vid -> .)
    OR              reduce using rule 113 (add_vid -> .)
    AND             reduce using rule 113 (add_vid -> .)
    MAIN            reduce using rule 113 (add_vid -> .)
    FUNCTION        reduce using rule 113 (add_vid -> .)
    VAR             reduce using rule 113 (add_vid -> .)
    RETURN          reduce using rule 113 (add_vid -> .)
    WHILE           reduce using rule 113 (add_vid -> .)
    IF              reduce using rule 113 (add_vid -> .)
    PRINT           reduce using rule 113 (add_vid -> .)
    READ            reduce using rule 113 (add_vid -> .)
    ID              reduce using rule 113 (add_vid -> .)
    LPAREN          reduce using rule 113 (add_vid -> .)
    CTESTR          reduce using rule 113 (add_vid -> .)
    CTEINT          reduce using rule 113 (add_vid -> .)
    CTEFLT          reduce using rule 113 (add_vid -> .)
    FALSE           reduce using rule 113 (add_vid -> .)
    TRUE            reduce using rule 113 (add_vid -> .)
    $end            reduce using rule 113 (add_vid -> .)
    RCURL           reduce using rule 113 (add_vid -> .)

    add_vid                        shift and go to state 46

state 7

    (1) program -> PROGRAM ID add_pid SCOLON progitem .
    $end            reduce using rule 1 (program -> PROGRAM ID add_pid SCOLON progitem .)


state 8

    (2) progitem -> main . programdv
    (6) programdv -> . empty
    (7) programdv -> . progitem
    (104) empty -> .
    (2) progitem -> . main programdv
    (3) progitem -> . function programdv
    (4) progitem -> . vars programdv
    (5) progitem -> . statement programdv
    (8) main -> . MAIN LPAREN RPAREN LCURL maindv
    (23) function -> . FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    $end            reduce using rule 104 (empty -> .)
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 14
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    main                           shift and go to state 8
    programdv                      shift and go to state 47
    empty                          shift and go to state 48
    progitem                       shift and go to state 49
    function                       shift and go to state 9
    vars                           shift and go to state 10
    statement                      shift and go to state 11
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 9

    (3) progitem -> function . programdv
    (6) programdv -> . empty
    (7) programdv -> . progitem
    (104) empty -> .
    (2) progitem -> . main programdv
    (3) progitem -> . function programdv
    (4) progitem -> . vars programdv
    (5) progitem -> . statement programdv
    (8) main -> . MAIN LPAREN RPAREN LCURL maindv
    (23) function -> . FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    $end            reduce using rule 104 (empty -> .)
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 14
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    function                       shift and go to state 9
    programdv                      shift and go to state 50
    empty                          shift and go to state 48
    progitem                       shift and go to state 49
    main                           shift and go to state 8
    vars                           shift and go to state 10
    statement                      shift and go to state 11
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 10

    (4) progitem -> vars . programdv
    (6) programdv -> . empty
    (7) programdv -> . progitem
    (104) empty -> .
    (2) progitem -> . main programdv
    (3) progitem -> . function programdv
    (4) progitem -> . vars programdv
    (5) progitem -> . statement programdv
    (8) main -> . MAIN LPAREN RPAREN LCURL maindv
    (23) function -> . FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    $end            reduce using rule 104 (empty -> .)
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 14
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    vars                           shift and go to state 10
    programdv                      shift and go to state 51
    empty                          shift and go to state 48
    progitem                       shift and go to state 49
    main                           shift and go to state 8
    function                       shift and go to state 9
    statement                      shift and go to state 11
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 11

    (5) progitem -> statement . programdv
    (6) programdv -> . empty
    (7) programdv -> . progitem
    (104) empty -> .
    (2) progitem -> . main programdv
    (3) progitem -> . function programdv
    (4) progitem -> . vars programdv
    (5) progitem -> . statement programdv
    (8) main -> . MAIN LPAREN RPAREN LCURL maindv
    (23) function -> . FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    $end            reduce using rule 104 (empty -> .)
    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 14
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    statement                      shift and go to state 11
    programdv                      shift and go to state 52
    empty                          shift and go to state 48
    progitem                       shift and go to state 49
    main                           shift and go to state 8
    function                       shift and go to state 9
    vars                           shift and go to state 10
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 12

    (8) main -> MAIN . LPAREN RPAREN LCURL maindv
    LPAREN          shift and go to state 53


state 13

    (66) pexp -> LPAREN . push_oper_ctx exprdv RPAREN pop_oper_ctx
    (123) push_oper_ctx -> .
    ID              reduce using rule 123 (push_oper_ctx -> .)
    LPAREN          reduce using rule 123 (push_oper_ctx -> .)
    CTESTR          reduce using rule 123 (push_oper_ctx -> .)
    CTEINT          reduce using rule 123 (push_oper_ctx -> .)
    CTEFLT          reduce using rule 123 (push_oper_ctx -> .)
    FALSE           reduce using rule 123 (push_oper_ctx -> .)
    TRUE            reduce using rule 123 (push_oper_ctx -> .)

    push_oper_ctx                  shift and go to state 54

state 14

    (23) function -> FUNCTION . typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (24) typefunc -> . VOID
    (25) typefunc -> . vtype
    (13) vtype -> . TSTR
    (14) vtype -> . TFLT
    (15) vtype -> . TINT
    (16) vtype -> . TBOOL
    VOID            shift and go to state 56
    TSTR            shift and go to state 58
    TFLT            shift and go to state 59
    TINT            shift and go to state 60
    TBOOL           shift and go to state 61

    typefunc                       shift and go to state 55
    vtype                          shift and go to state 57

state 15

    (12) vars -> VAR . vtype add_cvtype COLON listids SCOLON reset_vtype
    (13) vtype -> . TSTR
    (14) vtype -> . TFLT
    (15) vtype -> . TINT
    (16) vtype -> . TBOOL
    TSTR            shift and go to state 58
    TFLT            shift and go to state 59
    TINT            shift and go to state 60
    TBOOL           shift and go to state 61

    vtype                          shift and go to state 62

state 16

    (34) statement -> rreturn . SCOLON
    SCOLON          shift and go to state 63


state 17

    (35) statement -> wwhile .
    MAIN            reduce using rule 35 (statement -> wwhile .)
    FUNCTION        reduce using rule 35 (statement -> wwhile .)
    VAR             reduce using rule 35 (statement -> wwhile .)
    RETURN          reduce using rule 35 (statement -> wwhile .)
    WHILE           reduce using rule 35 (statement -> wwhile .)
    IF              reduce using rule 35 (statement -> wwhile .)
    PRINT           reduce using rule 35 (statement -> wwhile .)
    READ            reduce using rule 35 (statement -> wwhile .)
    ID              reduce using rule 35 (statement -> wwhile .)
    LPAREN          reduce using rule 35 (statement -> wwhile .)
    CTESTR          reduce using rule 35 (statement -> wwhile .)
    CTEINT          reduce using rule 35 (statement -> wwhile .)
    CTEFLT          reduce using rule 35 (statement -> wwhile .)
    FALSE           reduce using rule 35 (statement -> wwhile .)
    TRUE            reduce using rule 35 (statement -> wwhile .)
    $end            reduce using rule 35 (statement -> wwhile .)
    RCURL           reduce using rule 35 (statement -> wwhile .)


state 18

    (36) statement -> cond .
    MAIN            reduce using rule 36 (statement -> cond .)
    FUNCTION        reduce using rule 36 (statement -> cond .)
    VAR             reduce using rule 36 (statement -> cond .)
    RETURN          reduce using rule 36 (statement -> cond .)
    WHILE           reduce using rule 36 (statement -> cond .)
    IF              reduce using rule 36 (statement -> cond .)
    PRINT           reduce using rule 36 (statement -> cond .)
    READ            reduce using rule 36 (statement -> cond .)
    ID              reduce using rule 36 (statement -> cond .)
    LPAREN          reduce using rule 36 (statement -> cond .)
    CTESTR          reduce using rule 36 (statement -> cond .)
    CTEINT          reduce using rule 36 (statement -> cond .)
    CTEFLT          reduce using rule 36 (statement -> cond .)
    FALSE           reduce using rule 36 (statement -> cond .)
    TRUE            reduce using rule 36 (statement -> cond .)
    $end            reduce using rule 36 (statement -> cond .)
    RCURL           reduce using rule 36 (statement -> cond .)


state 19

    (37) statement -> pprint . SCOLON
    SCOLON          shift and go to state 64


state 20

    (38) statement -> read . SCOLON
    SCOLON          shift and go to state 65


state 21

    (39) statement -> funccall . SCOLON
    (62) pexp -> funccall . add_funcv
    (146) add_funcv -> .
    SCOLON          shift and go to state 66
    FDIV            reduce using rule 146 (add_funcv -> .)
    DIV             reduce using rule 146 (add_funcv -> .)
    MULT            reduce using rule 146 (add_funcv -> .)
    EXP             reduce using rule 146 (add_funcv -> .)
    SUB             reduce using rule 146 (add_funcv -> .)
    ADD             reduce using rule 146 (add_funcv -> .)
    GTEQ            reduce using rule 146 (add_funcv -> .)
    LTEQ            reduce using rule 146 (add_funcv -> .)
    NOTEQ           reduce using rule 146 (add_funcv -> .)
    EQ              reduce using rule 146 (add_funcv -> .)
    GT              reduce using rule 146 (add_funcv -> .)
    LT              reduce using rule 146 (add_funcv -> .)
    OR              reduce using rule 146 (add_funcv -> .)
    AND             reduce using rule 146 (add_funcv -> .)
    MAIN            reduce using rule 146 (add_funcv -> .)
    FUNCTION        reduce using rule 146 (add_funcv -> .)
    VAR             reduce using rule 146 (add_funcv -> .)
    RETURN          reduce using rule 146 (add_funcv -> .)
    WHILE           reduce using rule 146 (add_funcv -> .)
    IF              reduce using rule 146 (add_funcv -> .)
    PRINT           reduce using rule 146 (add_funcv -> .)
    READ            reduce using rule 146 (add_funcv -> .)
    ID              reduce using rule 146 (add_funcv -> .)
    LPAREN          reduce using rule 146 (add_funcv -> .)
    CTESTR          reduce using rule 146 (add_funcv -> .)
    CTEINT          reduce using rule 146 (add_funcv -> .)
    CTEFLT          reduce using rule 146 (add_funcv -> .)
    FALSE           reduce using rule 146 (add_funcv -> .)
    TRUE            reduce using rule 146 (add_funcv -> .)
    $end            reduce using rule 146 (add_funcv -> .)
    RCURL           reduce using rule 146 (add_funcv -> .)

    add_funcv                      shift and go to state 67

state 22

    (40) statement -> shrtassgn . SCOLON
    SCOLON          shift and go to state 68


state 23

    (41) statement -> assign . SCOLON
    SCOLON          shift and go to state 69


state 24

    (42) statement -> expr .
    MAIN            reduce using rule 42 (statement -> expr .)
    FUNCTION        reduce using rule 42 (statement -> expr .)
    VAR             reduce using rule 42 (statement -> expr .)
    RETURN          reduce using rule 42 (statement -> expr .)
    WHILE           reduce using rule 42 (statement -> expr .)
    IF              reduce using rule 42 (statement -> expr .)
    PRINT           reduce using rule 42 (statement -> expr .)
    READ            reduce using rule 42 (statement -> expr .)
    ID              reduce using rule 42 (statement -> expr .)
    LPAREN          reduce using rule 42 (statement -> expr .)
    CTESTR          reduce using rule 42 (statement -> expr .)
    CTEINT          reduce using rule 42 (statement -> expr .)
    CTEFLT          reduce using rule 42 (statement -> expr .)
    FALSE           reduce using rule 42 (statement -> expr .)
    TRUE            reduce using rule 42 (statement -> expr .)
    $end            reduce using rule 42 (statement -> expr .)
    RCURL           reduce using rule 42 (statement -> expr .)


state 25

    (95) rreturn -> RETURN . expr check_return
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 70
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 26

    (92) wwhile -> WHILE . add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (137) add_wpquad -> .
    LPAREN          reduce using rule 137 (add_wpquad -> .)

    add_wpquad                     shift and go to state 74

state 27

    (87) cond -> IF . LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF . LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    LPAREN          shift and go to state 75


state 28

    (78) pprint -> PRINT . LPAREN printlist RPAREN gen_print_quads
    LPAREN          shift and go to state 76


state 29

    (76) read -> READ . LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> READ . LPAREN ID RPAREN gen_read
    LPAREN          shift and go to state 77


state 30

    (67) assign -> varidx . gen_fidx ASGN expr gen_idx_assign
    (63) pexp -> varidx . gen_tidx
    (117) gen_fidx -> .
    (116) gen_tidx -> .
    ASGN            reduce using rule 117 (gen_fidx -> .)
    FDIV            reduce using rule 116 (gen_tidx -> .)
    DIV             reduce using rule 116 (gen_tidx -> .)
    MULT            reduce using rule 116 (gen_tidx -> .)
    EXP             reduce using rule 116 (gen_tidx -> .)
    SUB             reduce using rule 116 (gen_tidx -> .)
    ADD             reduce using rule 116 (gen_tidx -> .)
    GTEQ            reduce using rule 116 (gen_tidx -> .)
    LTEQ            reduce using rule 116 (gen_tidx -> .)
    NOTEQ           reduce using rule 116 (gen_tidx -> .)
    EQ              reduce using rule 116 (gen_tidx -> .)
    GT              reduce using rule 116 (gen_tidx -> .)
    LT              reduce using rule 116 (gen_tidx -> .)
    OR              reduce using rule 116 (gen_tidx -> .)
    AND             reduce using rule 116 (gen_tidx -> .)
    MAIN            reduce using rule 116 (gen_tidx -> .)
    FUNCTION        reduce using rule 116 (gen_tidx -> .)
    VAR             reduce using rule 116 (gen_tidx -> .)
    RETURN          reduce using rule 116 (gen_tidx -> .)
    WHILE           reduce using rule 116 (gen_tidx -> .)
    IF              reduce using rule 116 (gen_tidx -> .)
    PRINT           reduce using rule 116 (gen_tidx -> .)
    READ            reduce using rule 116 (gen_tidx -> .)
    ID              reduce using rule 116 (gen_tidx -> .)
    LPAREN          reduce using rule 116 (gen_tidx -> .)
    CTESTR          reduce using rule 116 (gen_tidx -> .)
    CTEINT          reduce using rule 116 (gen_tidx -> .)
    CTEFLT          reduce using rule 116 (gen_tidx -> .)
    FALSE           reduce using rule 116 (gen_tidx -> .)
    TRUE            reduce using rule 116 (gen_tidx -> .)
    $end            reduce using rule 116 (gen_tidx -> .)
    RCURL           reduce using rule 116 (gen_tidx -> .)

    gen_fidx                       shift and go to state 78
    gen_tidx                       shift and go to state 79

state 31

    (43) expr -> exprdv .
    MAIN            reduce using rule 43 (expr -> exprdv .)
    FUNCTION        reduce using rule 43 (expr -> exprdv .)
    VAR             reduce using rule 43 (expr -> exprdv .)
    RETURN          reduce using rule 43 (expr -> exprdv .)
    WHILE           reduce using rule 43 (expr -> exprdv .)
    IF              reduce using rule 43 (expr -> exprdv .)
    PRINT           reduce using rule 43 (expr -> exprdv .)
    READ            reduce using rule 43 (expr -> exprdv .)
    ID              reduce using rule 43 (expr -> exprdv .)
    LPAREN          reduce using rule 43 (expr -> exprdv .)
    CTESTR          reduce using rule 43 (expr -> exprdv .)
    CTEINT          reduce using rule 43 (expr -> exprdv .)
    CTEFLT          reduce using rule 43 (expr -> exprdv .)
    FALSE           reduce using rule 43 (expr -> exprdv .)
    TRUE            reduce using rule 43 (expr -> exprdv .)
    $end            reduce using rule 43 (expr -> exprdv .)
    SCOLON          reduce using rule 43 (expr -> exprdv .)
    RPAREN          reduce using rule 43 (expr -> exprdv .)
    RBRCKT          reduce using rule 43 (expr -> exprdv .)
    RCURL           reduce using rule 43 (expr -> exprdv .)
    COMMA           reduce using rule 43 (expr -> exprdv .)


state 32

    (44) exprdv -> bexp . check_expr_st
    (45) exprdv -> bexp . OR add_oper exprdv check_expr_st
    (46) exprdv -> bexp . AND add_oper exprdv check_expr_st
    (119) check_expr_st -> .
    OR              shift and go to state 81
    AND             shift and go to state 82
    MAIN            reduce using rule 119 (check_expr_st -> .)
    FUNCTION        reduce using rule 119 (check_expr_st -> .)
    VAR             reduce using rule 119 (check_expr_st -> .)
    RETURN          reduce using rule 119 (check_expr_st -> .)
    WHILE           reduce using rule 119 (check_expr_st -> .)
    IF              reduce using rule 119 (check_expr_st -> .)
    PRINT           reduce using rule 119 (check_expr_st -> .)
    READ            reduce using rule 119 (check_expr_st -> .)
    ID              reduce using rule 119 (check_expr_st -> .)
    LPAREN          reduce using rule 119 (check_expr_st -> .)
    CTESTR          reduce using rule 119 (check_expr_st -> .)
    CTEINT          reduce using rule 119 (check_expr_st -> .)
    CTEFLT          reduce using rule 119 (check_expr_st -> .)
    FALSE           reduce using rule 119 (check_expr_st -> .)
    TRUE            reduce using rule 119 (check_expr_st -> .)
    $end            reduce using rule 119 (check_expr_st -> .)
    SCOLON          reduce using rule 119 (check_expr_st -> .)
    RPAREN          reduce using rule 119 (check_expr_st -> .)
    RBRCKT          reduce using rule 119 (check_expr_st -> .)
    RCURL           reduce using rule 119 (check_expr_st -> .)
    COMMA           reduce using rule 119 (check_expr_st -> .)

    check_expr_st                  shift and go to state 80

state 33

    (47) bexp -> asexp . check_bexp_st
    (48) bexp -> asexp . GTEQ add_oper bexp check_bexp_st
    (49) bexp -> asexp . LTEQ add_oper bexp check_bexp_st
    (50) bexp -> asexp . NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> asexp . EQ add_oper bexp check_bexp_st
    (52) bexp -> asexp . GT add_oper bexp check_bexp_st
    (53) bexp -> asexp . LT add_oper bexp check_bexp_st
    (120) check_bexp_st -> .
    GTEQ            shift and go to state 84
    LTEQ            shift and go to state 85
    NOTEQ           shift and go to state 86
    EQ              shift and go to state 87
    GT              shift and go to state 88
    LT              shift and go to state 89
    OR              reduce using rule 120 (check_bexp_st -> .)
    AND             reduce using rule 120 (check_bexp_st -> .)
    MAIN            reduce using rule 120 (check_bexp_st -> .)
    FUNCTION        reduce using rule 120 (check_bexp_st -> .)
    VAR             reduce using rule 120 (check_bexp_st -> .)
    RETURN          reduce using rule 120 (check_bexp_st -> .)
    WHILE           reduce using rule 120 (check_bexp_st -> .)
    IF              reduce using rule 120 (check_bexp_st -> .)
    PRINT           reduce using rule 120 (check_bexp_st -> .)
    READ            reduce using rule 120 (check_bexp_st -> .)
    ID              reduce using rule 120 (check_bexp_st -> .)
    LPAREN          reduce using rule 120 (check_bexp_st -> .)
    CTESTR          reduce using rule 120 (check_bexp_st -> .)
    CTEINT          reduce using rule 120 (check_bexp_st -> .)
    CTEFLT          reduce using rule 120 (check_bexp_st -> .)
    FALSE           reduce using rule 120 (check_bexp_st -> .)
    TRUE            reduce using rule 120 (check_bexp_st -> .)
    $end            reduce using rule 120 (check_bexp_st -> .)
    SCOLON          reduce using rule 120 (check_bexp_st -> .)
    RPAREN          reduce using rule 120 (check_bexp_st -> .)
    RBRCKT          reduce using rule 120 (check_bexp_st -> .)
    RCURL           reduce using rule 120 (check_bexp_st -> .)
    COMMA           reduce using rule 120 (check_bexp_st -> .)

    check_bexp_st                  shift and go to state 83

state 34

    (54) asexp -> emdexp . check_asexp_st
    (55) asexp -> emdexp . SUB add_oper asexp check_asexp_st
    (56) asexp -> emdexp . ADD add_oper asexp check_asexp_st
    (121) check_asexp_st -> .
    SUB             shift and go to state 91
    ADD             shift and go to state 92
    GTEQ            reduce using rule 121 (check_asexp_st -> .)
    LTEQ            reduce using rule 121 (check_asexp_st -> .)
    NOTEQ           reduce using rule 121 (check_asexp_st -> .)
    EQ              reduce using rule 121 (check_asexp_st -> .)
    GT              reduce using rule 121 (check_asexp_st -> .)
    LT              reduce using rule 121 (check_asexp_st -> .)
    OR              reduce using rule 121 (check_asexp_st -> .)
    AND             reduce using rule 121 (check_asexp_st -> .)
    MAIN            reduce using rule 121 (check_asexp_st -> .)
    FUNCTION        reduce using rule 121 (check_asexp_st -> .)
    VAR             reduce using rule 121 (check_asexp_st -> .)
    RETURN          reduce using rule 121 (check_asexp_st -> .)
    WHILE           reduce using rule 121 (check_asexp_st -> .)
    IF              reduce using rule 121 (check_asexp_st -> .)
    PRINT           reduce using rule 121 (check_asexp_st -> .)
    READ            reduce using rule 121 (check_asexp_st -> .)
    ID              reduce using rule 121 (check_asexp_st -> .)
    LPAREN          reduce using rule 121 (check_asexp_st -> .)
    CTESTR          reduce using rule 121 (check_asexp_st -> .)
    CTEINT          reduce using rule 121 (check_asexp_st -> .)
    CTEFLT          reduce using rule 121 (check_asexp_st -> .)
    FALSE           reduce using rule 121 (check_asexp_st -> .)
    TRUE            reduce using rule 121 (check_asexp_st -> .)
    $end            reduce using rule 121 (check_asexp_st -> .)
    SCOLON          reduce using rule 121 (check_asexp_st -> .)
    RPAREN          reduce using rule 121 (check_asexp_st -> .)
    RBRCKT          reduce using rule 121 (check_asexp_st -> .)
    RCURL           reduce using rule 121 (check_asexp_st -> .)
    COMMA           reduce using rule 121 (check_asexp_st -> .)

    check_asexp_st                 shift and go to state 90

state 35

    (57) emdexp -> pexp . check_emdexp_st
    (58) emdexp -> pexp . FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> pexp . DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> pexp . MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> pexp . EXP add_oper emdexp check_emdexp_st
    (122) check_emdexp_st -> .
    FDIV            shift and go to state 94
    DIV             shift and go to state 95
    MULT            shift and go to state 96
    EXP             shift and go to state 97
    SUB             reduce using rule 122 (check_emdexp_st -> .)
    ADD             reduce using rule 122 (check_emdexp_st -> .)
    GTEQ            reduce using rule 122 (check_emdexp_st -> .)
    LTEQ            reduce using rule 122 (check_emdexp_st -> .)
    NOTEQ           reduce using rule 122 (check_emdexp_st -> .)
    EQ              reduce using rule 122 (check_emdexp_st -> .)
    GT              reduce using rule 122 (check_emdexp_st -> .)
    LT              reduce using rule 122 (check_emdexp_st -> .)
    OR              reduce using rule 122 (check_emdexp_st -> .)
    AND             reduce using rule 122 (check_emdexp_st -> .)
    MAIN            reduce using rule 122 (check_emdexp_st -> .)
    FUNCTION        reduce using rule 122 (check_emdexp_st -> .)
    VAR             reduce using rule 122 (check_emdexp_st -> .)
    RETURN          reduce using rule 122 (check_emdexp_st -> .)
    WHILE           reduce using rule 122 (check_emdexp_st -> .)
    IF              reduce using rule 122 (check_emdexp_st -> .)
    PRINT           reduce using rule 122 (check_emdexp_st -> .)
    READ            reduce using rule 122 (check_emdexp_st -> .)
    ID              reduce using rule 122 (check_emdexp_st -> .)
    LPAREN          reduce using rule 122 (check_emdexp_st -> .)
    CTESTR          reduce using rule 122 (check_emdexp_st -> .)
    CTEINT          reduce using rule 122 (check_emdexp_st -> .)
    CTEFLT          reduce using rule 122 (check_emdexp_st -> .)
    FALSE           reduce using rule 122 (check_emdexp_st -> .)
    TRUE            reduce using rule 122 (check_emdexp_st -> .)
    $end            reduce using rule 122 (check_emdexp_st -> .)
    SCOLON          reduce using rule 122 (check_emdexp_st -> .)
    RPAREN          reduce using rule 122 (check_emdexp_st -> .)
    RBRCKT          reduce using rule 122 (check_emdexp_st -> .)
    RCURL           reduce using rule 122 (check_emdexp_st -> .)
    COMMA           reduce using rule 122 (check_emdexp_st -> .)

    check_emdexp_st                shift and go to state 93

state 36

    (65) pexp -> const . save_const
    (112) save_const -> .
    FDIV            reduce using rule 112 (save_const -> .)
    DIV             reduce using rule 112 (save_const -> .)
    MULT            reduce using rule 112 (save_const -> .)
    EXP             reduce using rule 112 (save_const -> .)
    SUB             reduce using rule 112 (save_const -> .)
    ADD             reduce using rule 112 (save_const -> .)
    GTEQ            reduce using rule 112 (save_const -> .)
    LTEQ            reduce using rule 112 (save_const -> .)
    NOTEQ           reduce using rule 112 (save_const -> .)
    EQ              reduce using rule 112 (save_const -> .)
    GT              reduce using rule 112 (save_const -> .)
    LT              reduce using rule 112 (save_const -> .)
    OR              reduce using rule 112 (save_const -> .)
    AND             reduce using rule 112 (save_const -> .)
    MAIN            reduce using rule 112 (save_const -> .)
    FUNCTION        reduce using rule 112 (save_const -> .)
    VAR             reduce using rule 112 (save_const -> .)
    RETURN          reduce using rule 112 (save_const -> .)
    WHILE           reduce using rule 112 (save_const -> .)
    IF              reduce using rule 112 (save_const -> .)
    PRINT           reduce using rule 112 (save_const -> .)
    READ            reduce using rule 112 (save_const -> .)
    ID              reduce using rule 112 (save_const -> .)
    LPAREN          reduce using rule 112 (save_const -> .)
    CTESTR          reduce using rule 112 (save_const -> .)
    CTEINT          reduce using rule 112 (save_const -> .)
    CTEFLT          reduce using rule 112 (save_const -> .)
    FALSE           reduce using rule 112 (save_const -> .)
    TRUE            reduce using rule 112 (save_const -> .)
    $end            reduce using rule 112 (save_const -> .)
    SCOLON          reduce using rule 112 (save_const -> .)
    RPAREN          reduce using rule 112 (save_const -> .)
    RBRCKT          reduce using rule 112 (save_const -> .)
    RCURL           reduce using rule 112 (save_const -> .)
    COMMA           reduce using rule 112 (save_const -> .)

    save_const                     shift and go to state 98

state 37

    (96) const -> CTESTR .
    FDIV            reduce using rule 96 (const -> CTESTR .)
    DIV             reduce using rule 96 (const -> CTESTR .)
    MULT            reduce using rule 96 (const -> CTESTR .)
    EXP             reduce using rule 96 (const -> CTESTR .)
    SUB             reduce using rule 96 (const -> CTESTR .)
    ADD             reduce using rule 96 (const -> CTESTR .)
    GTEQ            reduce using rule 96 (const -> CTESTR .)
    LTEQ            reduce using rule 96 (const -> CTESTR .)
    NOTEQ           reduce using rule 96 (const -> CTESTR .)
    EQ              reduce using rule 96 (const -> CTESTR .)
    GT              reduce using rule 96 (const -> CTESTR .)
    LT              reduce using rule 96 (const -> CTESTR .)
    OR              reduce using rule 96 (const -> CTESTR .)
    AND             reduce using rule 96 (const -> CTESTR .)
    MAIN            reduce using rule 96 (const -> CTESTR .)
    FUNCTION        reduce using rule 96 (const -> CTESTR .)
    VAR             reduce using rule 96 (const -> CTESTR .)
    RETURN          reduce using rule 96 (const -> CTESTR .)
    WHILE           reduce using rule 96 (const -> CTESTR .)
    IF              reduce using rule 96 (const -> CTESTR .)
    PRINT           reduce using rule 96 (const -> CTESTR .)
    READ            reduce using rule 96 (const -> CTESTR .)
    ID              reduce using rule 96 (const -> CTESTR .)
    LPAREN          reduce using rule 96 (const -> CTESTR .)
    CTESTR          reduce using rule 96 (const -> CTESTR .)
    CTEINT          reduce using rule 96 (const -> CTESTR .)
    CTEFLT          reduce using rule 96 (const -> CTESTR .)
    FALSE           reduce using rule 96 (const -> CTESTR .)
    TRUE            reduce using rule 96 (const -> CTESTR .)
    $end            reduce using rule 96 (const -> CTESTR .)
    SCOLON          reduce using rule 96 (const -> CTESTR .)
    RPAREN          reduce using rule 96 (const -> CTESTR .)
    RBRCKT          reduce using rule 96 (const -> CTESTR .)
    RCURL           reduce using rule 96 (const -> CTESTR .)
    COMMA           reduce using rule 96 (const -> CTESTR .)


state 38

    (97) const -> CTEINT .
    FDIV            reduce using rule 97 (const -> CTEINT .)
    DIV             reduce using rule 97 (const -> CTEINT .)
    MULT            reduce using rule 97 (const -> CTEINT .)
    EXP             reduce using rule 97 (const -> CTEINT .)
    SUB             reduce using rule 97 (const -> CTEINT .)
    ADD             reduce using rule 97 (const -> CTEINT .)
    GTEQ            reduce using rule 97 (const -> CTEINT .)
    LTEQ            reduce using rule 97 (const -> CTEINT .)
    NOTEQ           reduce using rule 97 (const -> CTEINT .)
    EQ              reduce using rule 97 (const -> CTEINT .)
    GT              reduce using rule 97 (const -> CTEINT .)
    LT              reduce using rule 97 (const -> CTEINT .)
    OR              reduce using rule 97 (const -> CTEINT .)
    AND             reduce using rule 97 (const -> CTEINT .)
    MAIN            reduce using rule 97 (const -> CTEINT .)
    FUNCTION        reduce using rule 97 (const -> CTEINT .)
    VAR             reduce using rule 97 (const -> CTEINT .)
    RETURN          reduce using rule 97 (const -> CTEINT .)
    WHILE           reduce using rule 97 (const -> CTEINT .)
    IF              reduce using rule 97 (const -> CTEINT .)
    PRINT           reduce using rule 97 (const -> CTEINT .)
    READ            reduce using rule 97 (const -> CTEINT .)
    ID              reduce using rule 97 (const -> CTEINT .)
    LPAREN          reduce using rule 97 (const -> CTEINT .)
    CTESTR          reduce using rule 97 (const -> CTEINT .)
    CTEINT          reduce using rule 97 (const -> CTEINT .)
    CTEFLT          reduce using rule 97 (const -> CTEINT .)
    FALSE           reduce using rule 97 (const -> CTEINT .)
    TRUE            reduce using rule 97 (const -> CTEINT .)
    $end            reduce using rule 97 (const -> CTEINT .)
    SCOLON          reduce using rule 97 (const -> CTEINT .)
    RPAREN          reduce using rule 97 (const -> CTEINT .)
    RBRCKT          reduce using rule 97 (const -> CTEINT .)
    RCURL           reduce using rule 97 (const -> CTEINT .)
    COMMA           reduce using rule 97 (const -> CTEINT .)


state 39

    (98) const -> CTEFLT .
    FDIV            reduce using rule 98 (const -> CTEFLT .)
    DIV             reduce using rule 98 (const -> CTEFLT .)
    MULT            reduce using rule 98 (const -> CTEFLT .)
    EXP             reduce using rule 98 (const -> CTEFLT .)
    SUB             reduce using rule 98 (const -> CTEFLT .)
    ADD             reduce using rule 98 (const -> CTEFLT .)
    GTEQ            reduce using rule 98 (const -> CTEFLT .)
    LTEQ            reduce using rule 98 (const -> CTEFLT .)
    NOTEQ           reduce using rule 98 (const -> CTEFLT .)
    EQ              reduce using rule 98 (const -> CTEFLT .)
    GT              reduce using rule 98 (const -> CTEFLT .)
    LT              reduce using rule 98 (const -> CTEFLT .)
    OR              reduce using rule 98 (const -> CTEFLT .)
    AND             reduce using rule 98 (const -> CTEFLT .)
    MAIN            reduce using rule 98 (const -> CTEFLT .)
    FUNCTION        reduce using rule 98 (const -> CTEFLT .)
    VAR             reduce using rule 98 (const -> CTEFLT .)
    RETURN          reduce using rule 98 (const -> CTEFLT .)
    WHILE           reduce using rule 98 (const -> CTEFLT .)
    IF              reduce using rule 98 (const -> CTEFLT .)
    PRINT           reduce using rule 98 (const -> CTEFLT .)
    READ            reduce using rule 98 (const -> CTEFLT .)
    ID              reduce using rule 98 (const -> CTEFLT .)
    LPAREN          reduce using rule 98 (const -> CTEFLT .)
    CTESTR          reduce using rule 98 (const -> CTEFLT .)
    CTEINT          reduce using rule 98 (const -> CTEFLT .)
    CTEFLT          reduce using rule 98 (const -> CTEFLT .)
    FALSE           reduce using rule 98 (const -> CTEFLT .)
    TRUE            reduce using rule 98 (const -> CTEFLT .)
    $end            reduce using rule 98 (const -> CTEFLT .)
    SCOLON          reduce using rule 98 (const -> CTEFLT .)
    RPAREN          reduce using rule 98 (const -> CTEFLT .)
    RBRCKT          reduce using rule 98 (const -> CTEFLT .)
    RCURL           reduce using rule 98 (const -> CTEFLT .)
    COMMA           reduce using rule 98 (const -> CTEFLT .)


state 40

    (99) const -> FALSE .
    FDIV            reduce using rule 99 (const -> FALSE .)
    DIV             reduce using rule 99 (const -> FALSE .)
    MULT            reduce using rule 99 (const -> FALSE .)
    EXP             reduce using rule 99 (const -> FALSE .)
    SUB             reduce using rule 99 (const -> FALSE .)
    ADD             reduce using rule 99 (const -> FALSE .)
    GTEQ            reduce using rule 99 (const -> FALSE .)
    LTEQ            reduce using rule 99 (const -> FALSE .)
    NOTEQ           reduce using rule 99 (const -> FALSE .)
    EQ              reduce using rule 99 (const -> FALSE .)
    GT              reduce using rule 99 (const -> FALSE .)
    LT              reduce using rule 99 (const -> FALSE .)
    OR              reduce using rule 99 (const -> FALSE .)
    AND             reduce using rule 99 (const -> FALSE .)
    MAIN            reduce using rule 99 (const -> FALSE .)
    FUNCTION        reduce using rule 99 (const -> FALSE .)
    VAR             reduce using rule 99 (const -> FALSE .)
    RETURN          reduce using rule 99 (const -> FALSE .)
    WHILE           reduce using rule 99 (const -> FALSE .)
    IF              reduce using rule 99 (const -> FALSE .)
    PRINT           reduce using rule 99 (const -> FALSE .)
    READ            reduce using rule 99 (const -> FALSE .)
    ID              reduce using rule 99 (const -> FALSE .)
    LPAREN          reduce using rule 99 (const -> FALSE .)
    CTESTR          reduce using rule 99 (const -> FALSE .)
    CTEINT          reduce using rule 99 (const -> FALSE .)
    CTEFLT          reduce using rule 99 (const -> FALSE .)
    FALSE           reduce using rule 99 (const -> FALSE .)
    TRUE            reduce using rule 99 (const -> FALSE .)
    $end            reduce using rule 99 (const -> FALSE .)
    SCOLON          reduce using rule 99 (const -> FALSE .)
    RPAREN          reduce using rule 99 (const -> FALSE .)
    RBRCKT          reduce using rule 99 (const -> FALSE .)
    RCURL           reduce using rule 99 (const -> FALSE .)
    COMMA           reduce using rule 99 (const -> FALSE .)


state 41

    (100) const -> TRUE .
    FDIV            reduce using rule 100 (const -> TRUE .)
    DIV             reduce using rule 100 (const -> TRUE .)
    MULT            reduce using rule 100 (const -> TRUE .)
    EXP             reduce using rule 100 (const -> TRUE .)
    SUB             reduce using rule 100 (const -> TRUE .)
    ADD             reduce using rule 100 (const -> TRUE .)
    GTEQ            reduce using rule 100 (const -> TRUE .)
    LTEQ            reduce using rule 100 (const -> TRUE .)
    NOTEQ           reduce using rule 100 (const -> TRUE .)
    EQ              reduce using rule 100 (const -> TRUE .)
    GT              reduce using rule 100 (const -> TRUE .)
    LT              reduce using rule 100 (const -> TRUE .)
    OR              reduce using rule 100 (const -> TRUE .)
    AND             reduce using rule 100 (const -> TRUE .)
    MAIN            reduce using rule 100 (const -> TRUE .)
    FUNCTION        reduce using rule 100 (const -> TRUE .)
    VAR             reduce using rule 100 (const -> TRUE .)
    RETURN          reduce using rule 100 (const -> TRUE .)
    WHILE           reduce using rule 100 (const -> TRUE .)
    IF              reduce using rule 100 (const -> TRUE .)
    PRINT           reduce using rule 100 (const -> TRUE .)
    READ            reduce using rule 100 (const -> TRUE .)
    ID              reduce using rule 100 (const -> TRUE .)
    LPAREN          reduce using rule 100 (const -> TRUE .)
    CTESTR          reduce using rule 100 (const -> TRUE .)
    CTEINT          reduce using rule 100 (const -> TRUE .)
    CTEFLT          reduce using rule 100 (const -> TRUE .)
    FALSE           reduce using rule 100 (const -> TRUE .)
    TRUE            reduce using rule 100 (const -> TRUE .)
    $end            reduce using rule 100 (const -> TRUE .)
    SCOLON          reduce using rule 100 (const -> TRUE .)
    RPAREN          reduce using rule 100 (const -> TRUE .)
    RBRCKT          reduce using rule 100 (const -> TRUE .)
    RCURL           reduce using rule 100 (const -> TRUE .)
    COMMA           reduce using rule 100 (const -> TRUE .)


state 42

    (70) funccall -> ID FCALL . LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    LPAREN          shift and go to state 99


state 43

    (69) shrtassgn -> ID SHRT . expr gen_shrt_assign
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 100
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 44

    (68) assign -> ID ASGN . expr gen_assign
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 101
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 45

    (101) varidx -> ID LBRCKT . validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (114) validate_arr -> .
    ID              reduce using rule 114 (validate_arr -> .)
    LPAREN          reduce using rule 114 (validate_arr -> .)
    CTESTR          reduce using rule 114 (validate_arr -> .)
    CTEINT          reduce using rule 114 (validate_arr -> .)
    CTEFLT          reduce using rule 114 (validate_arr -> .)
    FALSE           reduce using rule 114 (validate_arr -> .)
    TRUE            reduce using rule 114 (validate_arr -> .)

    validate_arr                   shift and go to state 102

state 46

    (64) pexp -> ID add_vid .
    FDIV            reduce using rule 64 (pexp -> ID add_vid .)
    DIV             reduce using rule 64 (pexp -> ID add_vid .)
    MULT            reduce using rule 64 (pexp -> ID add_vid .)
    EXP             reduce using rule 64 (pexp -> ID add_vid .)
    SUB             reduce using rule 64 (pexp -> ID add_vid .)
    ADD             reduce using rule 64 (pexp -> ID add_vid .)
    GTEQ            reduce using rule 64 (pexp -> ID add_vid .)
    LTEQ            reduce using rule 64 (pexp -> ID add_vid .)
    NOTEQ           reduce using rule 64 (pexp -> ID add_vid .)
    EQ              reduce using rule 64 (pexp -> ID add_vid .)
    GT              reduce using rule 64 (pexp -> ID add_vid .)
    LT              reduce using rule 64 (pexp -> ID add_vid .)
    OR              reduce using rule 64 (pexp -> ID add_vid .)
    AND             reduce using rule 64 (pexp -> ID add_vid .)
    MAIN            reduce using rule 64 (pexp -> ID add_vid .)
    FUNCTION        reduce using rule 64 (pexp -> ID add_vid .)
    VAR             reduce using rule 64 (pexp -> ID add_vid .)
    RETURN          reduce using rule 64 (pexp -> ID add_vid .)
    WHILE           reduce using rule 64 (pexp -> ID add_vid .)
    IF              reduce using rule 64 (pexp -> ID add_vid .)
    PRINT           reduce using rule 64 (pexp -> ID add_vid .)
    READ            reduce using rule 64 (pexp -> ID add_vid .)
    ID              reduce using rule 64 (pexp -> ID add_vid .)
    LPAREN          reduce using rule 64 (pexp -> ID add_vid .)
    CTESTR          reduce using rule 64 (pexp -> ID add_vid .)
    CTEINT          reduce using rule 64 (pexp -> ID add_vid .)
    CTEFLT          reduce using rule 64 (pexp -> ID add_vid .)
    FALSE           reduce using rule 64 (pexp -> ID add_vid .)
    TRUE            reduce using rule 64 (pexp -> ID add_vid .)
    $end            reduce using rule 64 (pexp -> ID add_vid .)
    SCOLON          reduce using rule 64 (pexp -> ID add_vid .)
    RPAREN          reduce using rule 64 (pexp -> ID add_vid .)
    RBRCKT          reduce using rule 64 (pexp -> ID add_vid .)
    RCURL           reduce using rule 64 (pexp -> ID add_vid .)
    COMMA           reduce using rule 64 (pexp -> ID add_vid .)


state 47

    (2) progitem -> main programdv .
    $end            reduce using rule 2 (progitem -> main programdv .)


state 48

    (6) programdv -> empty .
    $end            reduce using rule 6 (programdv -> empty .)


state 49

    (7) programdv -> progitem .
    $end            reduce using rule 7 (programdv -> progitem .)


state 50

    (3) progitem -> function programdv .
    $end            reduce using rule 3 (progitem -> function programdv .)


state 51

    (4) progitem -> vars programdv .
    $end            reduce using rule 4 (progitem -> vars programdv .)


state 52

    (5) progitem -> statement programdv .
    $end            reduce using rule 5 (progitem -> statement programdv .)


state 53

    (8) main -> MAIN LPAREN . RPAREN LCURL maindv
    RPAREN          shift and go to state 103


state 54

    (66) pexp -> LPAREN push_oper_ctx . exprdv RPAREN pop_oper_ctx
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    exprdv                         shift and go to state 104
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 55

    (23) function -> FUNCTION typefunc . ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    ID              shift and go to state 105


state 56

    (24) typefunc -> VOID .
    ID              reduce using rule 24 (typefunc -> VOID .)


state 57

    (25) typefunc -> vtype .
    ID              reduce using rule 25 (typefunc -> vtype .)


state 58

    (13) vtype -> TSTR .
    ID              reduce using rule 13 (vtype -> TSTR .)
    COLON           reduce using rule 13 (vtype -> TSTR .)


state 59

    (14) vtype -> TFLT .
    ID              reduce using rule 14 (vtype -> TFLT .)
    COLON           reduce using rule 14 (vtype -> TFLT .)


state 60

    (15) vtype -> TINT .
    ID              reduce using rule 15 (vtype -> TINT .)
    COLON           reduce using rule 15 (vtype -> TINT .)


state 61

    (16) vtype -> TBOOL .
    ID              reduce using rule 16 (vtype -> TBOOL .)
    COLON           reduce using rule 16 (vtype -> TBOOL .)


state 62

    (12) vars -> VAR vtype . add_cvtype COLON listids SCOLON reset_vtype
    (106) add_cvtype -> .
    COLON           reduce using rule 106 (add_cvtype -> .)

    add_cvtype                     shift and go to state 106

state 63

    (34) statement -> rreturn SCOLON .
    MAIN            reduce using rule 34 (statement -> rreturn SCOLON .)
    FUNCTION        reduce using rule 34 (statement -> rreturn SCOLON .)
    VAR             reduce using rule 34 (statement -> rreturn SCOLON .)
    RETURN          reduce using rule 34 (statement -> rreturn SCOLON .)
    WHILE           reduce using rule 34 (statement -> rreturn SCOLON .)
    IF              reduce using rule 34 (statement -> rreturn SCOLON .)
    PRINT           reduce using rule 34 (statement -> rreturn SCOLON .)
    READ            reduce using rule 34 (statement -> rreturn SCOLON .)
    ID              reduce using rule 34 (statement -> rreturn SCOLON .)
    LPAREN          reduce using rule 34 (statement -> rreturn SCOLON .)
    CTESTR          reduce using rule 34 (statement -> rreturn SCOLON .)
    CTEINT          reduce using rule 34 (statement -> rreturn SCOLON .)
    CTEFLT          reduce using rule 34 (statement -> rreturn SCOLON .)
    FALSE           reduce using rule 34 (statement -> rreturn SCOLON .)
    TRUE            reduce using rule 34 (statement -> rreturn SCOLON .)
    $end            reduce using rule 34 (statement -> rreturn SCOLON .)
    RCURL           reduce using rule 34 (statement -> rreturn SCOLON .)


state 64

    (37) statement -> pprint SCOLON .
    MAIN            reduce using rule 37 (statement -> pprint SCOLON .)
    FUNCTION        reduce using rule 37 (statement -> pprint SCOLON .)
    VAR             reduce using rule 37 (statement -> pprint SCOLON .)
    RETURN          reduce using rule 37 (statement -> pprint SCOLON .)
    WHILE           reduce using rule 37 (statement -> pprint SCOLON .)
    IF              reduce using rule 37 (statement -> pprint SCOLON .)
    PRINT           reduce using rule 37 (statement -> pprint SCOLON .)
    READ            reduce using rule 37 (statement -> pprint SCOLON .)
    ID              reduce using rule 37 (statement -> pprint SCOLON .)
    LPAREN          reduce using rule 37 (statement -> pprint SCOLON .)
    CTESTR          reduce using rule 37 (statement -> pprint SCOLON .)
    CTEINT          reduce using rule 37 (statement -> pprint SCOLON .)
    CTEFLT          reduce using rule 37 (statement -> pprint SCOLON .)
    FALSE           reduce using rule 37 (statement -> pprint SCOLON .)
    TRUE            reduce using rule 37 (statement -> pprint SCOLON .)
    $end            reduce using rule 37 (statement -> pprint SCOLON .)
    RCURL           reduce using rule 37 (statement -> pprint SCOLON .)


state 65

    (38) statement -> read SCOLON .
    MAIN            reduce using rule 38 (statement -> read SCOLON .)
    FUNCTION        reduce using rule 38 (statement -> read SCOLON .)
    VAR             reduce using rule 38 (statement -> read SCOLON .)
    RETURN          reduce using rule 38 (statement -> read SCOLON .)
    WHILE           reduce using rule 38 (statement -> read SCOLON .)
    IF              reduce using rule 38 (statement -> read SCOLON .)
    PRINT           reduce using rule 38 (statement -> read SCOLON .)
    READ            reduce using rule 38 (statement -> read SCOLON .)
    ID              reduce using rule 38 (statement -> read SCOLON .)
    LPAREN          reduce using rule 38 (statement -> read SCOLON .)
    CTESTR          reduce using rule 38 (statement -> read SCOLON .)
    CTEINT          reduce using rule 38 (statement -> read SCOLON .)
    CTEFLT          reduce using rule 38 (statement -> read SCOLON .)
    FALSE           reduce using rule 38 (statement -> read SCOLON .)
    TRUE            reduce using rule 38 (statement -> read SCOLON .)
    $end            reduce using rule 38 (statement -> read SCOLON .)
    RCURL           reduce using rule 38 (statement -> read SCOLON .)


state 66

    (39) statement -> funccall SCOLON .
    MAIN            reduce using rule 39 (statement -> funccall SCOLON .)
    FUNCTION        reduce using rule 39 (statement -> funccall SCOLON .)
    VAR             reduce using rule 39 (statement -> funccall SCOLON .)
    RETURN          reduce using rule 39 (statement -> funccall SCOLON .)
    WHILE           reduce using rule 39 (statement -> funccall SCOLON .)
    IF              reduce using rule 39 (statement -> funccall SCOLON .)
    PRINT           reduce using rule 39 (statement -> funccall SCOLON .)
    READ            reduce using rule 39 (statement -> funccall SCOLON .)
    ID              reduce using rule 39 (statement -> funccall SCOLON .)
    LPAREN          reduce using rule 39 (statement -> funccall SCOLON .)
    CTESTR          reduce using rule 39 (statement -> funccall SCOLON .)
    CTEINT          reduce using rule 39 (statement -> funccall SCOLON .)
    CTEFLT          reduce using rule 39 (statement -> funccall SCOLON .)
    FALSE           reduce using rule 39 (statement -> funccall SCOLON .)
    TRUE            reduce using rule 39 (statement -> funccall SCOLON .)
    $end            reduce using rule 39 (statement -> funccall SCOLON .)
    RCURL           reduce using rule 39 (statement -> funccall SCOLON .)


state 67

    (62) pexp -> funccall add_funcv .
    FDIV            reduce using rule 62 (pexp -> funccall add_funcv .)
    DIV             reduce using rule 62 (pexp -> funccall add_funcv .)
    MULT            reduce using rule 62 (pexp -> funccall add_funcv .)
    EXP             reduce using rule 62 (pexp -> funccall add_funcv .)
    SUB             reduce using rule 62 (pexp -> funccall add_funcv .)
    ADD             reduce using rule 62 (pexp -> funccall add_funcv .)
    GTEQ            reduce using rule 62 (pexp -> funccall add_funcv .)
    LTEQ            reduce using rule 62 (pexp -> funccall add_funcv .)
    NOTEQ           reduce using rule 62 (pexp -> funccall add_funcv .)
    EQ              reduce using rule 62 (pexp -> funccall add_funcv .)
    GT              reduce using rule 62 (pexp -> funccall add_funcv .)
    LT              reduce using rule 62 (pexp -> funccall add_funcv .)
    OR              reduce using rule 62 (pexp -> funccall add_funcv .)
    AND             reduce using rule 62 (pexp -> funccall add_funcv .)
    MAIN            reduce using rule 62 (pexp -> funccall add_funcv .)
    FUNCTION        reduce using rule 62 (pexp -> funccall add_funcv .)
    VAR             reduce using rule 62 (pexp -> funccall add_funcv .)
    RETURN          reduce using rule 62 (pexp -> funccall add_funcv .)
    WHILE           reduce using rule 62 (pexp -> funccall add_funcv .)
    IF              reduce using rule 62 (pexp -> funccall add_funcv .)
    PRINT           reduce using rule 62 (pexp -> funccall add_funcv .)
    READ            reduce using rule 62 (pexp -> funccall add_funcv .)
    ID              reduce using rule 62 (pexp -> funccall add_funcv .)
    LPAREN          reduce using rule 62 (pexp -> funccall add_funcv .)
    CTESTR          reduce using rule 62 (pexp -> funccall add_funcv .)
    CTEINT          reduce using rule 62 (pexp -> funccall add_funcv .)
    CTEFLT          reduce using rule 62 (pexp -> funccall add_funcv .)
    FALSE           reduce using rule 62 (pexp -> funccall add_funcv .)
    TRUE            reduce using rule 62 (pexp -> funccall add_funcv .)
    $end            reduce using rule 62 (pexp -> funccall add_funcv .)
    SCOLON          reduce using rule 62 (pexp -> funccall add_funcv .)
    RPAREN          reduce using rule 62 (pexp -> funccall add_funcv .)
    RBRCKT          reduce using rule 62 (pexp -> funccall add_funcv .)
    RCURL           reduce using rule 62 (pexp -> funccall add_funcv .)
    COMMA           reduce using rule 62 (pexp -> funccall add_funcv .)


state 68

    (40) statement -> shrtassgn SCOLON .
    MAIN            reduce using rule 40 (statement -> shrtassgn SCOLON .)
    FUNCTION        reduce using rule 40 (statement -> shrtassgn SCOLON .)
    VAR             reduce using rule 40 (statement -> shrtassgn SCOLON .)
    RETURN          reduce using rule 40 (statement -> shrtassgn SCOLON .)
    WHILE           reduce using rule 40 (statement -> shrtassgn SCOLON .)
    IF              reduce using rule 40 (statement -> shrtassgn SCOLON .)
    PRINT           reduce using rule 40 (statement -> shrtassgn SCOLON .)
    READ            reduce using rule 40 (statement -> shrtassgn SCOLON .)
    ID              reduce using rule 40 (statement -> shrtassgn SCOLON .)
    LPAREN          reduce using rule 40 (statement -> shrtassgn SCOLON .)
    CTESTR          reduce using rule 40 (statement -> shrtassgn SCOLON .)
    CTEINT          reduce using rule 40 (statement -> shrtassgn SCOLON .)
    CTEFLT          reduce using rule 40 (statement -> shrtassgn SCOLON .)
    FALSE           reduce using rule 40 (statement -> shrtassgn SCOLON .)
    TRUE            reduce using rule 40 (statement -> shrtassgn SCOLON .)
    $end            reduce using rule 40 (statement -> shrtassgn SCOLON .)
    RCURL           reduce using rule 40 (statement -> shrtassgn SCOLON .)


state 69

    (41) statement -> assign SCOLON .
    MAIN            reduce using rule 41 (statement -> assign SCOLON .)
    FUNCTION        reduce using rule 41 (statement -> assign SCOLON .)
    VAR             reduce using rule 41 (statement -> assign SCOLON .)
    RETURN          reduce using rule 41 (statement -> assign SCOLON .)
    WHILE           reduce using rule 41 (statement -> assign SCOLON .)
    IF              reduce using rule 41 (statement -> assign SCOLON .)
    PRINT           reduce using rule 41 (statement -> assign SCOLON .)
    READ            reduce using rule 41 (statement -> assign SCOLON .)
    ID              reduce using rule 41 (statement -> assign SCOLON .)
    LPAREN          reduce using rule 41 (statement -> assign SCOLON .)
    CTESTR          reduce using rule 41 (statement -> assign SCOLON .)
    CTEINT          reduce using rule 41 (statement -> assign SCOLON .)
    CTEFLT          reduce using rule 41 (statement -> assign SCOLON .)
    FALSE           reduce using rule 41 (statement -> assign SCOLON .)
    TRUE            reduce using rule 41 (statement -> assign SCOLON .)
    $end            reduce using rule 41 (statement -> assign SCOLON .)
    RCURL           reduce using rule 41 (statement -> assign SCOLON .)


state 70

    (95) rreturn -> RETURN expr . check_return
    (143) check_return -> .
    SCOLON          reduce using rule 143 (check_return -> .)

    check_return                   shift and go to state 107

state 71

    (62) pexp -> funccall . add_funcv
    (146) add_funcv -> .
    FDIV            reduce using rule 146 (add_funcv -> .)
    DIV             reduce using rule 146 (add_funcv -> .)
    MULT            reduce using rule 146 (add_funcv -> .)
    EXP             reduce using rule 146 (add_funcv -> .)
    SUB             reduce using rule 146 (add_funcv -> .)
    ADD             reduce using rule 146 (add_funcv -> .)
    GTEQ            reduce using rule 146 (add_funcv -> .)
    LTEQ            reduce using rule 146 (add_funcv -> .)
    NOTEQ           reduce using rule 146 (add_funcv -> .)
    EQ              reduce using rule 146 (add_funcv -> .)
    GT              reduce using rule 146 (add_funcv -> .)
    LT              reduce using rule 146 (add_funcv -> .)
    OR              reduce using rule 146 (add_funcv -> .)
    AND             reduce using rule 146 (add_funcv -> .)
    SCOLON          reduce using rule 146 (add_funcv -> .)
    RPAREN          reduce using rule 146 (add_funcv -> .)
    MAIN            reduce using rule 146 (add_funcv -> .)
    FUNCTION        reduce using rule 146 (add_funcv -> .)
    VAR             reduce using rule 146 (add_funcv -> .)
    RETURN          reduce using rule 146 (add_funcv -> .)
    WHILE           reduce using rule 146 (add_funcv -> .)
    IF              reduce using rule 146 (add_funcv -> .)
    PRINT           reduce using rule 146 (add_funcv -> .)
    READ            reduce using rule 146 (add_funcv -> .)
    ID              reduce using rule 146 (add_funcv -> .)
    LPAREN          reduce using rule 146 (add_funcv -> .)
    CTESTR          reduce using rule 146 (add_funcv -> .)
    CTEINT          reduce using rule 146 (add_funcv -> .)
    CTEFLT          reduce using rule 146 (add_funcv -> .)
    FALSE           reduce using rule 146 (add_funcv -> .)
    TRUE            reduce using rule 146 (add_funcv -> .)
    $end            reduce using rule 146 (add_funcv -> .)
    RBRCKT          reduce using rule 146 (add_funcv -> .)
    RCURL           reduce using rule 146 (add_funcv -> .)
    COMMA           reduce using rule 146 (add_funcv -> .)

    add_funcv                      shift and go to state 67

state 72

    (63) pexp -> varidx . gen_tidx
    (116) gen_tidx -> .
    FDIV            reduce using rule 116 (gen_tidx -> .)
    DIV             reduce using rule 116 (gen_tidx -> .)
    MULT            reduce using rule 116 (gen_tidx -> .)
    EXP             reduce using rule 116 (gen_tidx -> .)
    SUB             reduce using rule 116 (gen_tidx -> .)
    ADD             reduce using rule 116 (gen_tidx -> .)
    GTEQ            reduce using rule 116 (gen_tidx -> .)
    LTEQ            reduce using rule 116 (gen_tidx -> .)
    NOTEQ           reduce using rule 116 (gen_tidx -> .)
    EQ              reduce using rule 116 (gen_tidx -> .)
    GT              reduce using rule 116 (gen_tidx -> .)
    LT              reduce using rule 116 (gen_tidx -> .)
    OR              reduce using rule 116 (gen_tidx -> .)
    AND             reduce using rule 116 (gen_tidx -> .)
    SCOLON          reduce using rule 116 (gen_tidx -> .)
    RPAREN          reduce using rule 116 (gen_tidx -> .)
    MAIN            reduce using rule 116 (gen_tidx -> .)
    FUNCTION        reduce using rule 116 (gen_tidx -> .)
    VAR             reduce using rule 116 (gen_tidx -> .)
    RETURN          reduce using rule 116 (gen_tidx -> .)
    WHILE           reduce using rule 116 (gen_tidx -> .)
    IF              reduce using rule 116 (gen_tidx -> .)
    PRINT           reduce using rule 116 (gen_tidx -> .)
    READ            reduce using rule 116 (gen_tidx -> .)
    ID              reduce using rule 116 (gen_tidx -> .)
    LPAREN          reduce using rule 116 (gen_tidx -> .)
    CTESTR          reduce using rule 116 (gen_tidx -> .)
    CTEINT          reduce using rule 116 (gen_tidx -> .)
    CTEFLT          reduce using rule 116 (gen_tidx -> .)
    FALSE           reduce using rule 116 (gen_tidx -> .)
    TRUE            reduce using rule 116 (gen_tidx -> .)
    $end            reduce using rule 116 (gen_tidx -> .)
    RBRCKT          reduce using rule 116 (gen_tidx -> .)
    RCURL           reduce using rule 116 (gen_tidx -> .)
    COMMA           reduce using rule 116 (gen_tidx -> .)

    gen_tidx                       shift and go to state 79

state 73

    (64) pexp -> ID . add_vid
    (70) funccall -> ID . FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> ID . LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (113) add_vid -> .
    FCALL           shift and go to state 42
    LBRCKT          shift and go to state 45
    FDIV            reduce using rule 113 (add_vid -> .)
    DIV             reduce using rule 113 (add_vid -> .)
    MULT            reduce using rule 113 (add_vid -> .)
    EXP             reduce using rule 113 (add_vid -> .)
    SUB             reduce using rule 113 (add_vid -> .)
    ADD             reduce using rule 113 (add_vid -> .)
    GTEQ            reduce using rule 113 (add_vid -> .)
    LTEQ            reduce using rule 113 (add_vid -> .)
    NOTEQ           reduce using rule 113 (add_vid -> .)
    EQ              reduce using rule 113 (add_vid -> .)
    GT              reduce using rule 113 (add_vid -> .)
    LT              reduce using rule 113 (add_vid -> .)
    OR              reduce using rule 113 (add_vid -> .)
    AND             reduce using rule 113 (add_vid -> .)
    SCOLON          reduce using rule 113 (add_vid -> .)
    RPAREN          reduce using rule 113 (add_vid -> .)
    MAIN            reduce using rule 113 (add_vid -> .)
    FUNCTION        reduce using rule 113 (add_vid -> .)
    VAR             reduce using rule 113 (add_vid -> .)
    RETURN          reduce using rule 113 (add_vid -> .)
    WHILE           reduce using rule 113 (add_vid -> .)
    IF              reduce using rule 113 (add_vid -> .)
    PRINT           reduce using rule 113 (add_vid -> .)
    READ            reduce using rule 113 (add_vid -> .)
    ID              reduce using rule 113 (add_vid -> .)
    LPAREN          reduce using rule 113 (add_vid -> .)
    CTESTR          reduce using rule 113 (add_vid -> .)
    CTEINT          reduce using rule 113 (add_vid -> .)
    CTEFLT          reduce using rule 113 (add_vid -> .)
    FALSE           reduce using rule 113 (add_vid -> .)
    TRUE            reduce using rule 113 (add_vid -> .)
    $end            reduce using rule 113 (add_vid -> .)
    RBRCKT          reduce using rule 113 (add_vid -> .)
    RCURL           reduce using rule 113 (add_vid -> .)
    COMMA           reduce using rule 113 (add_vid -> .)

    add_vid                        shift and go to state 46

state 74

    (92) wwhile -> WHILE add_wpquad . LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    LPAREN          shift and go to state 108


state 75

    (87) cond -> IF LPAREN . expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF LPAREN . expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 109
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 76

    (78) pprint -> PRINT LPAREN . printlist RPAREN gen_print_quads
    (79) printlist -> . printerm printlistdv
    (82) printerm -> . CTESTR push_printct
    (83) printerm -> . varidx gen_fidx push_printidl
    (84) printerm -> . CTEFLT push_printct
    (85) printerm -> . CTEINT push_printct
    (86) printerm -> . ID push_printid
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    CTESTR          shift and go to state 112
    CTEFLT          shift and go to state 114
    CTEINT          shift and go to state 115
    ID              shift and go to state 116

    printlist                      shift and go to state 110
    printerm                       shift and go to state 111
    varidx                         shift and go to state 113

state 77

    (76) read -> READ LPAREN . varidx gen_fidx gen_idxread RPAREN
    (77) read -> READ LPAREN . ID RPAREN gen_read
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    ID              shift and go to state 118

    varidx                         shift and go to state 117

state 78

    (67) assign -> varidx gen_fidx . ASGN expr gen_idx_assign
    ASGN            shift and go to state 119


state 79

    (63) pexp -> varidx gen_tidx .
    FDIV            reduce using rule 63 (pexp -> varidx gen_tidx .)
    DIV             reduce using rule 63 (pexp -> varidx gen_tidx .)
    MULT            reduce using rule 63 (pexp -> varidx gen_tidx .)
    EXP             reduce using rule 63 (pexp -> varidx gen_tidx .)
    SUB             reduce using rule 63 (pexp -> varidx gen_tidx .)
    ADD             reduce using rule 63 (pexp -> varidx gen_tidx .)
    GTEQ            reduce using rule 63 (pexp -> varidx gen_tidx .)
    LTEQ            reduce using rule 63 (pexp -> varidx gen_tidx .)
    NOTEQ           reduce using rule 63 (pexp -> varidx gen_tidx .)
    EQ              reduce using rule 63 (pexp -> varidx gen_tidx .)
    GT              reduce using rule 63 (pexp -> varidx gen_tidx .)
    LT              reduce using rule 63 (pexp -> varidx gen_tidx .)
    OR              reduce using rule 63 (pexp -> varidx gen_tidx .)
    AND             reduce using rule 63 (pexp -> varidx gen_tidx .)
    MAIN            reduce using rule 63 (pexp -> varidx gen_tidx .)
    FUNCTION        reduce using rule 63 (pexp -> varidx gen_tidx .)
    VAR             reduce using rule 63 (pexp -> varidx gen_tidx .)
    RETURN          reduce using rule 63 (pexp -> varidx gen_tidx .)
    WHILE           reduce using rule 63 (pexp -> varidx gen_tidx .)
    IF              reduce using rule 63 (pexp -> varidx gen_tidx .)
    PRINT           reduce using rule 63 (pexp -> varidx gen_tidx .)
    READ            reduce using rule 63 (pexp -> varidx gen_tidx .)
    ID              reduce using rule 63 (pexp -> varidx gen_tidx .)
    LPAREN          reduce using rule 63 (pexp -> varidx gen_tidx .)
    CTESTR          reduce using rule 63 (pexp -> varidx gen_tidx .)
    CTEINT          reduce using rule 63 (pexp -> varidx gen_tidx .)
    CTEFLT          reduce using rule 63 (pexp -> varidx gen_tidx .)
    FALSE           reduce using rule 63 (pexp -> varidx gen_tidx .)
    TRUE            reduce using rule 63 (pexp -> varidx gen_tidx .)
    $end            reduce using rule 63 (pexp -> varidx gen_tidx .)
    SCOLON          reduce using rule 63 (pexp -> varidx gen_tidx .)
    RPAREN          reduce using rule 63 (pexp -> varidx gen_tidx .)
    RBRCKT          reduce using rule 63 (pexp -> varidx gen_tidx .)
    RCURL           reduce using rule 63 (pexp -> varidx gen_tidx .)
    COMMA           reduce using rule 63 (pexp -> varidx gen_tidx .)


state 80

    (44) exprdv -> bexp check_expr_st .
    MAIN            reduce using rule 44 (exprdv -> bexp check_expr_st .)
    FUNCTION        reduce using rule 44 (exprdv -> bexp check_expr_st .)
    VAR             reduce using rule 44 (exprdv -> bexp check_expr_st .)
    RETURN          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    WHILE           reduce using rule 44 (exprdv -> bexp check_expr_st .)
    IF              reduce using rule 44 (exprdv -> bexp check_expr_st .)
    PRINT           reduce using rule 44 (exprdv -> bexp check_expr_st .)
    READ            reduce using rule 44 (exprdv -> bexp check_expr_st .)
    ID              reduce using rule 44 (exprdv -> bexp check_expr_st .)
    LPAREN          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    CTESTR          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    CTEINT          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    CTEFLT          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    FALSE           reduce using rule 44 (exprdv -> bexp check_expr_st .)
    TRUE            reduce using rule 44 (exprdv -> bexp check_expr_st .)
    $end            reduce using rule 44 (exprdv -> bexp check_expr_st .)
    SCOLON          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    RPAREN          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    RBRCKT          reduce using rule 44 (exprdv -> bexp check_expr_st .)
    RCURL           reduce using rule 44 (exprdv -> bexp check_expr_st .)
    COMMA           reduce using rule 44 (exprdv -> bexp check_expr_st .)


state 81

    (45) exprdv -> bexp OR . add_oper exprdv check_expr_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 120

state 82

    (46) exprdv -> bexp AND . add_oper exprdv check_expr_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 121

state 83

    (47) bexp -> asexp check_bexp_st .
    OR              reduce using rule 47 (bexp -> asexp check_bexp_st .)
    AND             reduce using rule 47 (bexp -> asexp check_bexp_st .)
    MAIN            reduce using rule 47 (bexp -> asexp check_bexp_st .)
    FUNCTION        reduce using rule 47 (bexp -> asexp check_bexp_st .)
    VAR             reduce using rule 47 (bexp -> asexp check_bexp_st .)
    RETURN          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    WHILE           reduce using rule 47 (bexp -> asexp check_bexp_st .)
    IF              reduce using rule 47 (bexp -> asexp check_bexp_st .)
    PRINT           reduce using rule 47 (bexp -> asexp check_bexp_st .)
    READ            reduce using rule 47 (bexp -> asexp check_bexp_st .)
    ID              reduce using rule 47 (bexp -> asexp check_bexp_st .)
    LPAREN          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    CTESTR          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    CTEINT          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    CTEFLT          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    FALSE           reduce using rule 47 (bexp -> asexp check_bexp_st .)
    TRUE            reduce using rule 47 (bexp -> asexp check_bexp_st .)
    $end            reduce using rule 47 (bexp -> asexp check_bexp_st .)
    SCOLON          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    RPAREN          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    RBRCKT          reduce using rule 47 (bexp -> asexp check_bexp_st .)
    RCURL           reduce using rule 47 (bexp -> asexp check_bexp_st .)
    COMMA           reduce using rule 47 (bexp -> asexp check_bexp_st .)


state 84

    (48) bexp -> asexp GTEQ . add_oper bexp check_bexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 122

state 85

    (49) bexp -> asexp LTEQ . add_oper bexp check_bexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 123

state 86

    (50) bexp -> asexp NOTEQ . add_oper bexp check_bexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 124

state 87

    (51) bexp -> asexp EQ . add_oper bexp check_bexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 125

state 88

    (52) bexp -> asexp GT . add_oper bexp check_bexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 126

state 89

    (53) bexp -> asexp LT . add_oper bexp check_bexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 127

state 90

    (54) asexp -> emdexp check_asexp_st .
    GTEQ            reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    LTEQ            reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    NOTEQ           reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    EQ              reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    GT              reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    LT              reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    OR              reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    AND             reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    MAIN            reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    FUNCTION        reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    VAR             reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    RETURN          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    WHILE           reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    IF              reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    PRINT           reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    READ            reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    ID              reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    LPAREN          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    CTESTR          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    CTEINT          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    CTEFLT          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    FALSE           reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    TRUE            reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    $end            reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    SCOLON          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    RPAREN          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    RBRCKT          reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    RCURL           reduce using rule 54 (asexp -> emdexp check_asexp_st .)
    COMMA           reduce using rule 54 (asexp -> emdexp check_asexp_st .)


state 91

    (55) asexp -> emdexp SUB . add_oper asexp check_asexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 128

state 92

    (56) asexp -> emdexp ADD . add_oper asexp check_asexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 129

state 93

    (57) emdexp -> pexp check_emdexp_st .
    SUB             reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    ADD             reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    GTEQ            reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    LTEQ            reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    NOTEQ           reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    EQ              reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    GT              reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    LT              reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    OR              reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    AND             reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    MAIN            reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    FUNCTION        reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    VAR             reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    RETURN          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    WHILE           reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    IF              reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    PRINT           reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    READ            reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    ID              reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    LPAREN          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    CTESTR          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    CTEINT          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    CTEFLT          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    FALSE           reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    TRUE            reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    $end            reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    SCOLON          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    RPAREN          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    RBRCKT          reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    RCURL           reduce using rule 57 (emdexp -> pexp check_emdexp_st .)
    COMMA           reduce using rule 57 (emdexp -> pexp check_emdexp_st .)


state 94

    (58) emdexp -> pexp FDIV . add_oper emdexp check_emdexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 130

state 95

    (59) emdexp -> pexp DIV . add_oper emdexp check_emdexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 131

state 96

    (60) emdexp -> pexp MULT . add_oper emdexp check_emdexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 132

state 97

    (61) emdexp -> pexp EXP . add_oper emdexp check_emdexp_st
    (118) add_oper -> .
    ID              reduce using rule 118 (add_oper -> .)
    LPAREN          reduce using rule 118 (add_oper -> .)
    CTESTR          reduce using rule 118 (add_oper -> .)
    CTEINT          reduce using rule 118 (add_oper -> .)
    CTEFLT          reduce using rule 118 (add_oper -> .)
    FALSE           reduce using rule 118 (add_oper -> .)
    TRUE            reduce using rule 118 (add_oper -> .)

    add_oper                       shift and go to state 133

state 98

    (65) pexp -> const save_const .
    FDIV            reduce using rule 65 (pexp -> const save_const .)
    DIV             reduce using rule 65 (pexp -> const save_const .)
    MULT            reduce using rule 65 (pexp -> const save_const .)
    EXP             reduce using rule 65 (pexp -> const save_const .)
    SUB             reduce using rule 65 (pexp -> const save_const .)
    ADD             reduce using rule 65 (pexp -> const save_const .)
    GTEQ            reduce using rule 65 (pexp -> const save_const .)
    LTEQ            reduce using rule 65 (pexp -> const save_const .)
    NOTEQ           reduce using rule 65 (pexp -> const save_const .)
    EQ              reduce using rule 65 (pexp -> const save_const .)
    GT              reduce using rule 65 (pexp -> const save_const .)
    LT              reduce using rule 65 (pexp -> const save_const .)
    OR              reduce using rule 65 (pexp -> const save_const .)
    AND             reduce using rule 65 (pexp -> const save_const .)
    MAIN            reduce using rule 65 (pexp -> const save_const .)
    FUNCTION        reduce using rule 65 (pexp -> const save_const .)
    VAR             reduce using rule 65 (pexp -> const save_const .)
    RETURN          reduce using rule 65 (pexp -> const save_const .)
    WHILE           reduce using rule 65 (pexp -> const save_const .)
    IF              reduce using rule 65 (pexp -> const save_const .)
    PRINT           reduce using rule 65 (pexp -> const save_const .)
    READ            reduce using rule 65 (pexp -> const save_const .)
    ID              reduce using rule 65 (pexp -> const save_const .)
    LPAREN          reduce using rule 65 (pexp -> const save_const .)
    CTESTR          reduce using rule 65 (pexp -> const save_const .)
    CTEINT          reduce using rule 65 (pexp -> const save_const .)
    CTEFLT          reduce using rule 65 (pexp -> const save_const .)
    FALSE           reduce using rule 65 (pexp -> const save_const .)
    TRUE            reduce using rule 65 (pexp -> const save_const .)
    $end            reduce using rule 65 (pexp -> const save_const .)
    SCOLON          reduce using rule 65 (pexp -> const save_const .)
    RPAREN          reduce using rule 65 (pexp -> const save_const .)
    RBRCKT          reduce using rule 65 (pexp -> const save_const .)
    RCURL           reduce using rule 65 (pexp -> const save_const .)
    COMMA           reduce using rule 65 (pexp -> const save_const .)


state 99

    (70) funccall -> ID FCALL LPAREN . validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (145) validate_fid -> .
    ID              reduce using rule 145 (validate_fid -> .)
    LPAREN          reduce using rule 145 (validate_fid -> .)
    CTESTR          reduce using rule 145 (validate_fid -> .)
    CTEINT          reduce using rule 145 (validate_fid -> .)
    CTEFLT          reduce using rule 145 (validate_fid -> .)
    FALSE           reduce using rule 145 (validate_fid -> .)
    TRUE            reduce using rule 145 (validate_fid -> .)
    RPAREN          reduce using rule 145 (validate_fid -> .)

    validate_fid                   shift and go to state 134

state 100

    (69) shrtassgn -> ID SHRT expr . gen_shrt_assign
    (127) gen_shrt_assign -> .
    SCOLON          reduce using rule 127 (gen_shrt_assign -> .)

    gen_shrt_assign                shift and go to state 135

state 101

    (68) assign -> ID ASGN expr . gen_assign
    (125) gen_assign -> .
    SCOLON          reduce using rule 125 (gen_assign -> .)

    gen_assign                     shift and go to state 136

state 102

    (101) varidx -> ID LBRCKT validate_arr . push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (123) push_oper_ctx -> .
    ID              reduce using rule 123 (push_oper_ctx -> .)
    LPAREN          reduce using rule 123 (push_oper_ctx -> .)
    CTESTR          reduce using rule 123 (push_oper_ctx -> .)
    CTEINT          reduce using rule 123 (push_oper_ctx -> .)
    CTEFLT          reduce using rule 123 (push_oper_ctx -> .)
    FALSE           reduce using rule 123 (push_oper_ctx -> .)
    TRUE            reduce using rule 123 (push_oper_ctx -> .)

    push_oper_ctx                  shift and go to state 137

state 103

    (8) main -> MAIN LPAREN RPAREN . LCURL maindv
    LCURL           shift and go to state 138


state 104

    (66) pexp -> LPAREN push_oper_ctx exprdv . RPAREN pop_oper_ctx
    RPAREN          shift and go to state 139


state 105

    (23) function -> FUNCTION typefunc ID . save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (140) save_func -> .
    LPAREN          reduce using rule 140 (save_func -> .)

    save_func                      shift and go to state 140

state 106

    (12) vars -> VAR vtype add_cvtype . COLON listids SCOLON reset_vtype
    COLON           shift and go to state 141


state 107

    (95) rreturn -> RETURN expr check_return .
    SCOLON          reduce using rule 95 (rreturn -> RETURN expr check_return .)


state 108

    (92) wwhile -> WHILE add_wpquad LPAREN . expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 142
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 109

    (87) cond -> IF LPAREN expr . RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF LPAREN expr . RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    RPAREN          shift and go to state 143


state 110

    (78) pprint -> PRINT LPAREN printlist . RPAREN gen_print_quads
    RPAREN          shift and go to state 144


state 111

    (79) printlist -> printerm . printlistdv
    (80) printlistdv -> . empty
    (81) printlistdv -> . COMMA printlist
    (104) empty -> .
    COMMA           shift and go to state 147
    RPAREN          reduce using rule 104 (empty -> .)

    printlistdv                    shift and go to state 145
    empty                          shift and go to state 146

state 112

    (82) printerm -> CTESTR . push_printct
    (132) push_printct -> .
    COMMA           reduce using rule 132 (push_printct -> .)
    RPAREN          reduce using rule 132 (push_printct -> .)

    push_printct                   shift and go to state 148

state 113

    (83) printerm -> varidx . gen_fidx push_printidl
    (117) gen_fidx -> .
    COMMA           reduce using rule 117 (gen_fidx -> .)
    RPAREN          reduce using rule 117 (gen_fidx -> .)

    gen_fidx                       shift and go to state 149

state 114

    (84) printerm -> CTEFLT . push_printct
    (132) push_printct -> .
    COMMA           reduce using rule 132 (push_printct -> .)
    RPAREN          reduce using rule 132 (push_printct -> .)

    push_printct                   shift and go to state 150

state 115

    (85) printerm -> CTEINT . push_printct
    (132) push_printct -> .
    COMMA           reduce using rule 132 (push_printct -> .)
    RPAREN          reduce using rule 132 (push_printct -> .)

    push_printct                   shift and go to state 151

state 116

    (86) printerm -> ID . push_printid
    (101) varidx -> ID . LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (130) push_printid -> .
    LBRCKT          shift and go to state 45
    COMMA           reduce using rule 130 (push_printid -> .)
    RPAREN          reduce using rule 130 (push_printid -> .)

    push_printid                   shift and go to state 152

state 117

    (76) read -> READ LPAREN varidx . gen_fidx gen_idxread RPAREN
    (117) gen_fidx -> .
    RPAREN          reduce using rule 117 (gen_fidx -> .)

    gen_fidx                       shift and go to state 153

state 118

    (77) read -> READ LPAREN ID . RPAREN gen_read
    (101) varidx -> ID . LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    RPAREN          shift and go to state 154
    LBRCKT          shift and go to state 45


state 119

    (67) assign -> varidx gen_fidx ASGN . expr gen_idx_assign
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    varidx                         shift and go to state 72
    expr                           shift and go to state 155
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    const                          shift and go to state 36

state 120

    (45) exprdv -> bexp OR add_oper . exprdv check_expr_st
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    bexp                           shift and go to state 32
    exprdv                         shift and go to state 156
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 121

    (46) exprdv -> bexp AND add_oper . exprdv check_expr_st
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    bexp                           shift and go to state 32
    exprdv                         shift and go to state 157
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 122

    (48) bexp -> asexp GTEQ add_oper . bexp check_bexp_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    asexp                          shift and go to state 33
    bexp                           shift and go to state 158
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 123

    (49) bexp -> asexp LTEQ add_oper . bexp check_bexp_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    asexp                          shift and go to state 33
    bexp                           shift and go to state 159
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 124

    (50) bexp -> asexp NOTEQ add_oper . bexp check_bexp_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    asexp                          shift and go to state 33
    bexp                           shift and go to state 160
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 125

    (51) bexp -> asexp EQ add_oper . bexp check_bexp_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    asexp                          shift and go to state 33
    bexp                           shift and go to state 161
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 126

    (52) bexp -> asexp GT add_oper . bexp check_bexp_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    asexp                          shift and go to state 33
    bexp                           shift and go to state 162
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 127

    (53) bexp -> asexp LT add_oper . bexp check_bexp_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    asexp                          shift and go to state 33
    bexp                           shift and go to state 163
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 128

    (55) asexp -> emdexp SUB add_oper . asexp check_asexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    emdexp                         shift and go to state 34
    asexp                          shift and go to state 164
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 129

    (56) asexp -> emdexp ADD add_oper . asexp check_asexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    emdexp                         shift and go to state 34
    asexp                          shift and go to state 165
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 130

    (58) emdexp -> pexp FDIV add_oper . emdexp check_emdexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    pexp                           shift and go to state 35
    emdexp                         shift and go to state 166
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 131

    (59) emdexp -> pexp DIV add_oper . emdexp check_emdexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    pexp                           shift and go to state 35
    emdexp                         shift and go to state 167
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 132

    (60) emdexp -> pexp MULT add_oper . emdexp check_emdexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    pexp                           shift and go to state 35
    emdexp                         shift and go to state 168
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 133

    (61) emdexp -> pexp EXP add_oper . emdexp check_emdexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    pexp                           shift and go to state 35
    emdexp                         shift and go to state 169
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 134

    (70) funccall -> ID FCALL LPAREN validate_fid . push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (123) push_oper_ctx -> .
    ID              reduce using rule 123 (push_oper_ctx -> .)
    LPAREN          reduce using rule 123 (push_oper_ctx -> .)
    CTESTR          reduce using rule 123 (push_oper_ctx -> .)
    CTEINT          reduce using rule 123 (push_oper_ctx -> .)
    CTEFLT          reduce using rule 123 (push_oper_ctx -> .)
    FALSE           reduce using rule 123 (push_oper_ctx -> .)
    TRUE            reduce using rule 123 (push_oper_ctx -> .)
    RPAREN          reduce using rule 123 (push_oper_ctx -> .)

    push_oper_ctx                  shift and go to state 170

state 135

    (69) shrtassgn -> ID SHRT expr gen_shrt_assign .
    SCOLON          reduce using rule 69 (shrtassgn -> ID SHRT expr gen_shrt_assign .)


state 136

    (68) assign -> ID ASGN expr gen_assign .
    SCOLON          reduce using rule 68 (assign -> ID ASGN expr gen_assign .)


state 137

    (101) varidx -> ID LBRCKT validate_arr push_oper_ctx . expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 171
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 138

    (8) main -> MAIN LPAREN RPAREN LCURL . maindv
    (9) maindv -> . RCURL
    (10) maindv -> . statement maindv
    (11) maindv -> . vars maindv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 173
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    maindv                         shift and go to state 172
    statement                      shift and go to state 174
    vars                           shift and go to state 175
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 139

    (66) pexp -> LPAREN push_oper_ctx exprdv RPAREN . pop_oper_ctx
    (124) pop_oper_ctx -> .
    FDIV            reduce using rule 124 (pop_oper_ctx -> .)
    DIV             reduce using rule 124 (pop_oper_ctx -> .)
    MULT            reduce using rule 124 (pop_oper_ctx -> .)
    EXP             reduce using rule 124 (pop_oper_ctx -> .)
    SUB             reduce using rule 124 (pop_oper_ctx -> .)
    ADD             reduce using rule 124 (pop_oper_ctx -> .)
    GTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    LTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    NOTEQ           reduce using rule 124 (pop_oper_ctx -> .)
    EQ              reduce using rule 124 (pop_oper_ctx -> .)
    GT              reduce using rule 124 (pop_oper_ctx -> .)
    LT              reduce using rule 124 (pop_oper_ctx -> .)
    OR              reduce using rule 124 (pop_oper_ctx -> .)
    AND             reduce using rule 124 (pop_oper_ctx -> .)
    MAIN            reduce using rule 124 (pop_oper_ctx -> .)
    FUNCTION        reduce using rule 124 (pop_oper_ctx -> .)
    VAR             reduce using rule 124 (pop_oper_ctx -> .)
    RETURN          reduce using rule 124 (pop_oper_ctx -> .)
    WHILE           reduce using rule 124 (pop_oper_ctx -> .)
    IF              reduce using rule 124 (pop_oper_ctx -> .)
    PRINT           reduce using rule 124 (pop_oper_ctx -> .)
    READ            reduce using rule 124 (pop_oper_ctx -> .)
    ID              reduce using rule 124 (pop_oper_ctx -> .)
    LPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    CTESTR          reduce using rule 124 (pop_oper_ctx -> .)
    CTEINT          reduce using rule 124 (pop_oper_ctx -> .)
    CTEFLT          reduce using rule 124 (pop_oper_ctx -> .)
    FALSE           reduce using rule 124 (pop_oper_ctx -> .)
    TRUE            reduce using rule 124 (pop_oper_ctx -> .)
    $end            reduce using rule 124 (pop_oper_ctx -> .)
    SCOLON          reduce using rule 124 (pop_oper_ctx -> .)
    RPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    RBRCKT          reduce using rule 124 (pop_oper_ctx -> .)
    RCURL           reduce using rule 124 (pop_oper_ctx -> .)
    COMMA           reduce using rule 124 (pop_oper_ctx -> .)

    pop_oper_ctx                   shift and go to state 176

state 140

    (23) function -> FUNCTION typefunc ID save_func . LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    LPAREN          shift and go to state 177


state 141

    (12) vars -> VAR vtype add_cvtype COLON . listids SCOLON reset_vtype
    (17) listids -> . ID LBRCKT CTEINT RBRCKT store_arrid dimlist def_dims listdv
    (18) listids -> . ID store_varid listdv
    ID              shift and go to state 179

    listids                        shift and go to state 178

state 142

    (92) wwhile -> WHILE add_wpquad LPAREN expr . RPAREN gen_wquad DO LCURL whiledv add_wquad
    RPAREN          shift and go to state 180


state 143

    (87) cond -> IF LPAREN expr RPAREN . LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF LPAREN expr RPAREN . LCURL gen_cond_quad condst RCURL add_jquad
    LCURL           shift and go to state 181


state 144

    (78) pprint -> PRINT LPAREN printlist RPAREN . gen_print_quads
    (133) gen_print_quads -> .
    SCOLON          reduce using rule 133 (gen_print_quads -> .)

    gen_print_quads                shift and go to state 182

state 145

    (79) printlist -> printerm printlistdv .
    RPAREN          reduce using rule 79 (printlist -> printerm printlistdv .)


state 146

    (80) printlistdv -> empty .
    RPAREN          reduce using rule 80 (printlistdv -> empty .)


state 147

    (81) printlistdv -> COMMA . printlist
    (79) printlist -> . printerm printlistdv
    (82) printerm -> . CTESTR push_printct
    (83) printerm -> . varidx gen_fidx push_printidl
    (84) printerm -> . CTEFLT push_printct
    (85) printerm -> . CTEINT push_printct
    (86) printerm -> . ID push_printid
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    CTESTR          shift and go to state 112
    CTEFLT          shift and go to state 114
    CTEINT          shift and go to state 115
    ID              shift and go to state 116

    printlist                      shift and go to state 183
    printerm                       shift and go to state 111
    varidx                         shift and go to state 113

state 148

    (82) printerm -> CTESTR push_printct .
    COMMA           reduce using rule 82 (printerm -> CTESTR push_printct .)
    RPAREN          reduce using rule 82 (printerm -> CTESTR push_printct .)


state 149

    (83) printerm -> varidx gen_fidx . push_printidl
    (131) push_printidl -> .
    COMMA           reduce using rule 131 (push_printidl -> .)
    RPAREN          reduce using rule 131 (push_printidl -> .)

    push_printidl                  shift and go to state 184

state 150

    (84) printerm -> CTEFLT push_printct .
    COMMA           reduce using rule 84 (printerm -> CTEFLT push_printct .)
    RPAREN          reduce using rule 84 (printerm -> CTEFLT push_printct .)


state 151

    (85) printerm -> CTEINT push_printct .
    COMMA           reduce using rule 85 (printerm -> CTEINT push_printct .)
    RPAREN          reduce using rule 85 (printerm -> CTEINT push_printct .)


state 152

    (86) printerm -> ID push_printid .
    COMMA           reduce using rule 86 (printerm -> ID push_printid .)
    RPAREN          reduce using rule 86 (printerm -> ID push_printid .)


state 153

    (76) read -> READ LPAREN varidx gen_fidx . gen_idxread RPAREN
    (129) gen_idxread -> .
    RPAREN          reduce using rule 129 (gen_idxread -> .)

    gen_idxread                    shift and go to state 185

state 154

    (77) read -> READ LPAREN ID RPAREN . gen_read
    (128) gen_read -> .
    SCOLON          reduce using rule 128 (gen_read -> .)

    gen_read                       shift and go to state 186

state 155

    (67) assign -> varidx gen_fidx ASGN expr . gen_idx_assign
    (126) gen_idx_assign -> .
    SCOLON          reduce using rule 126 (gen_idx_assign -> .)

    gen_idx_assign                 shift and go to state 187

state 156

    (45) exprdv -> bexp OR add_oper exprdv . check_expr_st
    (119) check_expr_st -> .
    MAIN            reduce using rule 119 (check_expr_st -> .)
    FUNCTION        reduce using rule 119 (check_expr_st -> .)
    VAR             reduce using rule 119 (check_expr_st -> .)
    RETURN          reduce using rule 119 (check_expr_st -> .)
    WHILE           reduce using rule 119 (check_expr_st -> .)
    IF              reduce using rule 119 (check_expr_st -> .)
    PRINT           reduce using rule 119 (check_expr_st -> .)
    READ            reduce using rule 119 (check_expr_st -> .)
    ID              reduce using rule 119 (check_expr_st -> .)
    LPAREN          reduce using rule 119 (check_expr_st -> .)
    CTESTR          reduce using rule 119 (check_expr_st -> .)
    CTEINT          reduce using rule 119 (check_expr_st -> .)
    CTEFLT          reduce using rule 119 (check_expr_st -> .)
    FALSE           reduce using rule 119 (check_expr_st -> .)
    TRUE            reduce using rule 119 (check_expr_st -> .)
    $end            reduce using rule 119 (check_expr_st -> .)
    SCOLON          reduce using rule 119 (check_expr_st -> .)
    RPAREN          reduce using rule 119 (check_expr_st -> .)
    RBRCKT          reduce using rule 119 (check_expr_st -> .)
    RCURL           reduce using rule 119 (check_expr_st -> .)
    COMMA           reduce using rule 119 (check_expr_st -> .)

    check_expr_st                  shift and go to state 188

state 157

    (46) exprdv -> bexp AND add_oper exprdv . check_expr_st
    (119) check_expr_st -> .
    MAIN            reduce using rule 119 (check_expr_st -> .)
    FUNCTION        reduce using rule 119 (check_expr_st -> .)
    VAR             reduce using rule 119 (check_expr_st -> .)
    RETURN          reduce using rule 119 (check_expr_st -> .)
    WHILE           reduce using rule 119 (check_expr_st -> .)
    IF              reduce using rule 119 (check_expr_st -> .)
    PRINT           reduce using rule 119 (check_expr_st -> .)
    READ            reduce using rule 119 (check_expr_st -> .)
    ID              reduce using rule 119 (check_expr_st -> .)
    LPAREN          reduce using rule 119 (check_expr_st -> .)
    CTESTR          reduce using rule 119 (check_expr_st -> .)
    CTEINT          reduce using rule 119 (check_expr_st -> .)
    CTEFLT          reduce using rule 119 (check_expr_st -> .)
    FALSE           reduce using rule 119 (check_expr_st -> .)
    TRUE            reduce using rule 119 (check_expr_st -> .)
    $end            reduce using rule 119 (check_expr_st -> .)
    SCOLON          reduce using rule 119 (check_expr_st -> .)
    RPAREN          reduce using rule 119 (check_expr_st -> .)
    RBRCKT          reduce using rule 119 (check_expr_st -> .)
    RCURL           reduce using rule 119 (check_expr_st -> .)
    COMMA           reduce using rule 119 (check_expr_st -> .)

    check_expr_st                  shift and go to state 189

state 158

    (48) bexp -> asexp GTEQ add_oper bexp . check_bexp_st
    (120) check_bexp_st -> .
    OR              reduce using rule 120 (check_bexp_st -> .)
    AND             reduce using rule 120 (check_bexp_st -> .)
    MAIN            reduce using rule 120 (check_bexp_st -> .)
    FUNCTION        reduce using rule 120 (check_bexp_st -> .)
    VAR             reduce using rule 120 (check_bexp_st -> .)
    RETURN          reduce using rule 120 (check_bexp_st -> .)
    WHILE           reduce using rule 120 (check_bexp_st -> .)
    IF              reduce using rule 120 (check_bexp_st -> .)
    PRINT           reduce using rule 120 (check_bexp_st -> .)
    READ            reduce using rule 120 (check_bexp_st -> .)
    ID              reduce using rule 120 (check_bexp_st -> .)
    LPAREN          reduce using rule 120 (check_bexp_st -> .)
    CTESTR          reduce using rule 120 (check_bexp_st -> .)
    CTEINT          reduce using rule 120 (check_bexp_st -> .)
    CTEFLT          reduce using rule 120 (check_bexp_st -> .)
    FALSE           reduce using rule 120 (check_bexp_st -> .)
    TRUE            reduce using rule 120 (check_bexp_st -> .)
    $end            reduce using rule 120 (check_bexp_st -> .)
    SCOLON          reduce using rule 120 (check_bexp_st -> .)
    RPAREN          reduce using rule 120 (check_bexp_st -> .)
    RBRCKT          reduce using rule 120 (check_bexp_st -> .)
    RCURL           reduce using rule 120 (check_bexp_st -> .)
    COMMA           reduce using rule 120 (check_bexp_st -> .)

    check_bexp_st                  shift and go to state 190

state 159

    (49) bexp -> asexp LTEQ add_oper bexp . check_bexp_st
    (120) check_bexp_st -> .
    OR              reduce using rule 120 (check_bexp_st -> .)
    AND             reduce using rule 120 (check_bexp_st -> .)
    MAIN            reduce using rule 120 (check_bexp_st -> .)
    FUNCTION        reduce using rule 120 (check_bexp_st -> .)
    VAR             reduce using rule 120 (check_bexp_st -> .)
    RETURN          reduce using rule 120 (check_bexp_st -> .)
    WHILE           reduce using rule 120 (check_bexp_st -> .)
    IF              reduce using rule 120 (check_bexp_st -> .)
    PRINT           reduce using rule 120 (check_bexp_st -> .)
    READ            reduce using rule 120 (check_bexp_st -> .)
    ID              reduce using rule 120 (check_bexp_st -> .)
    LPAREN          reduce using rule 120 (check_bexp_st -> .)
    CTESTR          reduce using rule 120 (check_bexp_st -> .)
    CTEINT          reduce using rule 120 (check_bexp_st -> .)
    CTEFLT          reduce using rule 120 (check_bexp_st -> .)
    FALSE           reduce using rule 120 (check_bexp_st -> .)
    TRUE            reduce using rule 120 (check_bexp_st -> .)
    $end            reduce using rule 120 (check_bexp_st -> .)
    SCOLON          reduce using rule 120 (check_bexp_st -> .)
    RPAREN          reduce using rule 120 (check_bexp_st -> .)
    RBRCKT          reduce using rule 120 (check_bexp_st -> .)
    RCURL           reduce using rule 120 (check_bexp_st -> .)
    COMMA           reduce using rule 120 (check_bexp_st -> .)

    check_bexp_st                  shift and go to state 191

state 160

    (50) bexp -> asexp NOTEQ add_oper bexp . check_bexp_st
    (120) check_bexp_st -> .
    OR              reduce using rule 120 (check_bexp_st -> .)
    AND             reduce using rule 120 (check_bexp_st -> .)
    MAIN            reduce using rule 120 (check_bexp_st -> .)
    FUNCTION        reduce using rule 120 (check_bexp_st -> .)
    VAR             reduce using rule 120 (check_bexp_st -> .)
    RETURN          reduce using rule 120 (check_bexp_st -> .)
    WHILE           reduce using rule 120 (check_bexp_st -> .)
    IF              reduce using rule 120 (check_bexp_st -> .)
    PRINT           reduce using rule 120 (check_bexp_st -> .)
    READ            reduce using rule 120 (check_bexp_st -> .)
    ID              reduce using rule 120 (check_bexp_st -> .)
    LPAREN          reduce using rule 120 (check_bexp_st -> .)
    CTESTR          reduce using rule 120 (check_bexp_st -> .)
    CTEINT          reduce using rule 120 (check_bexp_st -> .)
    CTEFLT          reduce using rule 120 (check_bexp_st -> .)
    FALSE           reduce using rule 120 (check_bexp_st -> .)
    TRUE            reduce using rule 120 (check_bexp_st -> .)
    $end            reduce using rule 120 (check_bexp_st -> .)
    SCOLON          reduce using rule 120 (check_bexp_st -> .)
    RPAREN          reduce using rule 120 (check_bexp_st -> .)
    RBRCKT          reduce using rule 120 (check_bexp_st -> .)
    RCURL           reduce using rule 120 (check_bexp_st -> .)
    COMMA           reduce using rule 120 (check_bexp_st -> .)

    check_bexp_st                  shift and go to state 192

state 161

    (51) bexp -> asexp EQ add_oper bexp . check_bexp_st
    (120) check_bexp_st -> .
    OR              reduce using rule 120 (check_bexp_st -> .)
    AND             reduce using rule 120 (check_bexp_st -> .)
    MAIN            reduce using rule 120 (check_bexp_st -> .)
    FUNCTION        reduce using rule 120 (check_bexp_st -> .)
    VAR             reduce using rule 120 (check_bexp_st -> .)
    RETURN          reduce using rule 120 (check_bexp_st -> .)
    WHILE           reduce using rule 120 (check_bexp_st -> .)
    IF              reduce using rule 120 (check_bexp_st -> .)
    PRINT           reduce using rule 120 (check_bexp_st -> .)
    READ            reduce using rule 120 (check_bexp_st -> .)
    ID              reduce using rule 120 (check_bexp_st -> .)
    LPAREN          reduce using rule 120 (check_bexp_st -> .)
    CTESTR          reduce using rule 120 (check_bexp_st -> .)
    CTEINT          reduce using rule 120 (check_bexp_st -> .)
    CTEFLT          reduce using rule 120 (check_bexp_st -> .)
    FALSE           reduce using rule 120 (check_bexp_st -> .)
    TRUE            reduce using rule 120 (check_bexp_st -> .)
    $end            reduce using rule 120 (check_bexp_st -> .)
    SCOLON          reduce using rule 120 (check_bexp_st -> .)
    RPAREN          reduce using rule 120 (check_bexp_st -> .)
    RBRCKT          reduce using rule 120 (check_bexp_st -> .)
    RCURL           reduce using rule 120 (check_bexp_st -> .)
    COMMA           reduce using rule 120 (check_bexp_st -> .)

    check_bexp_st                  shift and go to state 193

state 162

    (52) bexp -> asexp GT add_oper bexp . check_bexp_st
    (120) check_bexp_st -> .
    OR              reduce using rule 120 (check_bexp_st -> .)
    AND             reduce using rule 120 (check_bexp_st -> .)
    MAIN            reduce using rule 120 (check_bexp_st -> .)
    FUNCTION        reduce using rule 120 (check_bexp_st -> .)
    VAR             reduce using rule 120 (check_bexp_st -> .)
    RETURN          reduce using rule 120 (check_bexp_st -> .)
    WHILE           reduce using rule 120 (check_bexp_st -> .)
    IF              reduce using rule 120 (check_bexp_st -> .)
    PRINT           reduce using rule 120 (check_bexp_st -> .)
    READ            reduce using rule 120 (check_bexp_st -> .)
    ID              reduce using rule 120 (check_bexp_st -> .)
    LPAREN          reduce using rule 120 (check_bexp_st -> .)
    CTESTR          reduce using rule 120 (check_bexp_st -> .)
    CTEINT          reduce using rule 120 (check_bexp_st -> .)
    CTEFLT          reduce using rule 120 (check_bexp_st -> .)
    FALSE           reduce using rule 120 (check_bexp_st -> .)
    TRUE            reduce using rule 120 (check_bexp_st -> .)
    $end            reduce using rule 120 (check_bexp_st -> .)
    SCOLON          reduce using rule 120 (check_bexp_st -> .)
    RPAREN          reduce using rule 120 (check_bexp_st -> .)
    RBRCKT          reduce using rule 120 (check_bexp_st -> .)
    RCURL           reduce using rule 120 (check_bexp_st -> .)
    COMMA           reduce using rule 120 (check_bexp_st -> .)

    check_bexp_st                  shift and go to state 194

state 163

    (53) bexp -> asexp LT add_oper bexp . check_bexp_st
    (120) check_bexp_st -> .
    OR              reduce using rule 120 (check_bexp_st -> .)
    AND             reduce using rule 120 (check_bexp_st -> .)
    MAIN            reduce using rule 120 (check_bexp_st -> .)
    FUNCTION        reduce using rule 120 (check_bexp_st -> .)
    VAR             reduce using rule 120 (check_bexp_st -> .)
    RETURN          reduce using rule 120 (check_bexp_st -> .)
    WHILE           reduce using rule 120 (check_bexp_st -> .)
    IF              reduce using rule 120 (check_bexp_st -> .)
    PRINT           reduce using rule 120 (check_bexp_st -> .)
    READ            reduce using rule 120 (check_bexp_st -> .)
    ID              reduce using rule 120 (check_bexp_st -> .)
    LPAREN          reduce using rule 120 (check_bexp_st -> .)
    CTESTR          reduce using rule 120 (check_bexp_st -> .)
    CTEINT          reduce using rule 120 (check_bexp_st -> .)
    CTEFLT          reduce using rule 120 (check_bexp_st -> .)
    FALSE           reduce using rule 120 (check_bexp_st -> .)
    TRUE            reduce using rule 120 (check_bexp_st -> .)
    $end            reduce using rule 120 (check_bexp_st -> .)
    SCOLON          reduce using rule 120 (check_bexp_st -> .)
    RPAREN          reduce using rule 120 (check_bexp_st -> .)
    RBRCKT          reduce using rule 120 (check_bexp_st -> .)
    RCURL           reduce using rule 120 (check_bexp_st -> .)
    COMMA           reduce using rule 120 (check_bexp_st -> .)

    check_bexp_st                  shift and go to state 195

state 164

    (55) asexp -> emdexp SUB add_oper asexp . check_asexp_st
    (121) check_asexp_st -> .
    GTEQ            reduce using rule 121 (check_asexp_st -> .)
    LTEQ            reduce using rule 121 (check_asexp_st -> .)
    NOTEQ           reduce using rule 121 (check_asexp_st -> .)
    EQ              reduce using rule 121 (check_asexp_st -> .)
    GT              reduce using rule 121 (check_asexp_st -> .)
    LT              reduce using rule 121 (check_asexp_st -> .)
    OR              reduce using rule 121 (check_asexp_st -> .)
    AND             reduce using rule 121 (check_asexp_st -> .)
    MAIN            reduce using rule 121 (check_asexp_st -> .)
    FUNCTION        reduce using rule 121 (check_asexp_st -> .)
    VAR             reduce using rule 121 (check_asexp_st -> .)
    RETURN          reduce using rule 121 (check_asexp_st -> .)
    WHILE           reduce using rule 121 (check_asexp_st -> .)
    IF              reduce using rule 121 (check_asexp_st -> .)
    PRINT           reduce using rule 121 (check_asexp_st -> .)
    READ            reduce using rule 121 (check_asexp_st -> .)
    ID              reduce using rule 121 (check_asexp_st -> .)
    LPAREN          reduce using rule 121 (check_asexp_st -> .)
    CTESTR          reduce using rule 121 (check_asexp_st -> .)
    CTEINT          reduce using rule 121 (check_asexp_st -> .)
    CTEFLT          reduce using rule 121 (check_asexp_st -> .)
    FALSE           reduce using rule 121 (check_asexp_st -> .)
    TRUE            reduce using rule 121 (check_asexp_st -> .)
    $end            reduce using rule 121 (check_asexp_st -> .)
    SCOLON          reduce using rule 121 (check_asexp_st -> .)
    RPAREN          reduce using rule 121 (check_asexp_st -> .)
    RBRCKT          reduce using rule 121 (check_asexp_st -> .)
    RCURL           reduce using rule 121 (check_asexp_st -> .)
    COMMA           reduce using rule 121 (check_asexp_st -> .)

    check_asexp_st                 shift and go to state 196

state 165

    (56) asexp -> emdexp ADD add_oper asexp . check_asexp_st
    (121) check_asexp_st -> .
    GTEQ            reduce using rule 121 (check_asexp_st -> .)
    LTEQ            reduce using rule 121 (check_asexp_st -> .)
    NOTEQ           reduce using rule 121 (check_asexp_st -> .)
    EQ              reduce using rule 121 (check_asexp_st -> .)
    GT              reduce using rule 121 (check_asexp_st -> .)
    LT              reduce using rule 121 (check_asexp_st -> .)
    OR              reduce using rule 121 (check_asexp_st -> .)
    AND             reduce using rule 121 (check_asexp_st -> .)
    MAIN            reduce using rule 121 (check_asexp_st -> .)
    FUNCTION        reduce using rule 121 (check_asexp_st -> .)
    VAR             reduce using rule 121 (check_asexp_st -> .)
    RETURN          reduce using rule 121 (check_asexp_st -> .)
    WHILE           reduce using rule 121 (check_asexp_st -> .)
    IF              reduce using rule 121 (check_asexp_st -> .)
    PRINT           reduce using rule 121 (check_asexp_st -> .)
    READ            reduce using rule 121 (check_asexp_st -> .)
    ID              reduce using rule 121 (check_asexp_st -> .)
    LPAREN          reduce using rule 121 (check_asexp_st -> .)
    CTESTR          reduce using rule 121 (check_asexp_st -> .)
    CTEINT          reduce using rule 121 (check_asexp_st -> .)
    CTEFLT          reduce using rule 121 (check_asexp_st -> .)
    FALSE           reduce using rule 121 (check_asexp_st -> .)
    TRUE            reduce using rule 121 (check_asexp_st -> .)
    $end            reduce using rule 121 (check_asexp_st -> .)
    SCOLON          reduce using rule 121 (check_asexp_st -> .)
    RPAREN          reduce using rule 121 (check_asexp_st -> .)
    RBRCKT          reduce using rule 121 (check_asexp_st -> .)
    RCURL           reduce using rule 121 (check_asexp_st -> .)
    COMMA           reduce using rule 121 (check_asexp_st -> .)

    check_asexp_st                 shift and go to state 197

state 166

    (58) emdexp -> pexp FDIV add_oper emdexp . check_emdexp_st
    (122) check_emdexp_st -> .
    SUB             reduce using rule 122 (check_emdexp_st -> .)
    ADD             reduce using rule 122 (check_emdexp_st -> .)
    GTEQ            reduce using rule 122 (check_emdexp_st -> .)
    LTEQ            reduce using rule 122 (check_emdexp_st -> .)
    NOTEQ           reduce using rule 122 (check_emdexp_st -> .)
    EQ              reduce using rule 122 (check_emdexp_st -> .)
    GT              reduce using rule 122 (check_emdexp_st -> .)
    LT              reduce using rule 122 (check_emdexp_st -> .)
    OR              reduce using rule 122 (check_emdexp_st -> .)
    AND             reduce using rule 122 (check_emdexp_st -> .)
    MAIN            reduce using rule 122 (check_emdexp_st -> .)
    FUNCTION        reduce using rule 122 (check_emdexp_st -> .)
    VAR             reduce using rule 122 (check_emdexp_st -> .)
    RETURN          reduce using rule 122 (check_emdexp_st -> .)
    WHILE           reduce using rule 122 (check_emdexp_st -> .)
    IF              reduce using rule 122 (check_emdexp_st -> .)
    PRINT           reduce using rule 122 (check_emdexp_st -> .)
    READ            reduce using rule 122 (check_emdexp_st -> .)
    ID              reduce using rule 122 (check_emdexp_st -> .)
    LPAREN          reduce using rule 122 (check_emdexp_st -> .)
    CTESTR          reduce using rule 122 (check_emdexp_st -> .)
    CTEINT          reduce using rule 122 (check_emdexp_st -> .)
    CTEFLT          reduce using rule 122 (check_emdexp_st -> .)
    FALSE           reduce using rule 122 (check_emdexp_st -> .)
    TRUE            reduce using rule 122 (check_emdexp_st -> .)
    $end            reduce using rule 122 (check_emdexp_st -> .)
    SCOLON          reduce using rule 122 (check_emdexp_st -> .)
    RPAREN          reduce using rule 122 (check_emdexp_st -> .)
    RBRCKT          reduce using rule 122 (check_emdexp_st -> .)
    RCURL           reduce using rule 122 (check_emdexp_st -> .)
    COMMA           reduce using rule 122 (check_emdexp_st -> .)

    check_emdexp_st                shift and go to state 198

state 167

    (59) emdexp -> pexp DIV add_oper emdexp . check_emdexp_st
    (122) check_emdexp_st -> .
    SUB             reduce using rule 122 (check_emdexp_st -> .)
    ADD             reduce using rule 122 (check_emdexp_st -> .)
    GTEQ            reduce using rule 122 (check_emdexp_st -> .)
    LTEQ            reduce using rule 122 (check_emdexp_st -> .)
    NOTEQ           reduce using rule 122 (check_emdexp_st -> .)
    EQ              reduce using rule 122 (check_emdexp_st -> .)
    GT              reduce using rule 122 (check_emdexp_st -> .)
    LT              reduce using rule 122 (check_emdexp_st -> .)
    OR              reduce using rule 122 (check_emdexp_st -> .)
    AND             reduce using rule 122 (check_emdexp_st -> .)
    MAIN            reduce using rule 122 (check_emdexp_st -> .)
    FUNCTION        reduce using rule 122 (check_emdexp_st -> .)
    VAR             reduce using rule 122 (check_emdexp_st -> .)
    RETURN          reduce using rule 122 (check_emdexp_st -> .)
    WHILE           reduce using rule 122 (check_emdexp_st -> .)
    IF              reduce using rule 122 (check_emdexp_st -> .)
    PRINT           reduce using rule 122 (check_emdexp_st -> .)
    READ            reduce using rule 122 (check_emdexp_st -> .)
    ID              reduce using rule 122 (check_emdexp_st -> .)
    LPAREN          reduce using rule 122 (check_emdexp_st -> .)
    CTESTR          reduce using rule 122 (check_emdexp_st -> .)
    CTEINT          reduce using rule 122 (check_emdexp_st -> .)
    CTEFLT          reduce using rule 122 (check_emdexp_st -> .)
    FALSE           reduce using rule 122 (check_emdexp_st -> .)
    TRUE            reduce using rule 122 (check_emdexp_st -> .)
    $end            reduce using rule 122 (check_emdexp_st -> .)
    SCOLON          reduce using rule 122 (check_emdexp_st -> .)
    RPAREN          reduce using rule 122 (check_emdexp_st -> .)
    RBRCKT          reduce using rule 122 (check_emdexp_st -> .)
    RCURL           reduce using rule 122 (check_emdexp_st -> .)
    COMMA           reduce using rule 122 (check_emdexp_st -> .)

    check_emdexp_st                shift and go to state 199

state 168

    (60) emdexp -> pexp MULT add_oper emdexp . check_emdexp_st
    (122) check_emdexp_st -> .
    SUB             reduce using rule 122 (check_emdexp_st -> .)
    ADD             reduce using rule 122 (check_emdexp_st -> .)
    GTEQ            reduce using rule 122 (check_emdexp_st -> .)
    LTEQ            reduce using rule 122 (check_emdexp_st -> .)
    NOTEQ           reduce using rule 122 (check_emdexp_st -> .)
    EQ              reduce using rule 122 (check_emdexp_st -> .)
    GT              reduce using rule 122 (check_emdexp_st -> .)
    LT              reduce using rule 122 (check_emdexp_st -> .)
    OR              reduce using rule 122 (check_emdexp_st -> .)
    AND             reduce using rule 122 (check_emdexp_st -> .)
    MAIN            reduce using rule 122 (check_emdexp_st -> .)
    FUNCTION        reduce using rule 122 (check_emdexp_st -> .)
    VAR             reduce using rule 122 (check_emdexp_st -> .)
    RETURN          reduce using rule 122 (check_emdexp_st -> .)
    WHILE           reduce using rule 122 (check_emdexp_st -> .)
    IF              reduce using rule 122 (check_emdexp_st -> .)
    PRINT           reduce using rule 122 (check_emdexp_st -> .)
    READ            reduce using rule 122 (check_emdexp_st -> .)
    ID              reduce using rule 122 (check_emdexp_st -> .)
    LPAREN          reduce using rule 122 (check_emdexp_st -> .)
    CTESTR          reduce using rule 122 (check_emdexp_st -> .)
    CTEINT          reduce using rule 122 (check_emdexp_st -> .)
    CTEFLT          reduce using rule 122 (check_emdexp_st -> .)
    FALSE           reduce using rule 122 (check_emdexp_st -> .)
    TRUE            reduce using rule 122 (check_emdexp_st -> .)
    $end            reduce using rule 122 (check_emdexp_st -> .)
    SCOLON          reduce using rule 122 (check_emdexp_st -> .)
    RPAREN          reduce using rule 122 (check_emdexp_st -> .)
    RBRCKT          reduce using rule 122 (check_emdexp_st -> .)
    RCURL           reduce using rule 122 (check_emdexp_st -> .)
    COMMA           reduce using rule 122 (check_emdexp_st -> .)

    check_emdexp_st                shift and go to state 200

state 169

    (61) emdexp -> pexp EXP add_oper emdexp . check_emdexp_st
    (122) check_emdexp_st -> .
    SUB             reduce using rule 122 (check_emdexp_st -> .)
    ADD             reduce using rule 122 (check_emdexp_st -> .)
    GTEQ            reduce using rule 122 (check_emdexp_st -> .)
    LTEQ            reduce using rule 122 (check_emdexp_st -> .)
    NOTEQ           reduce using rule 122 (check_emdexp_st -> .)
    EQ              reduce using rule 122 (check_emdexp_st -> .)
    GT              reduce using rule 122 (check_emdexp_st -> .)
    LT              reduce using rule 122 (check_emdexp_st -> .)
    OR              reduce using rule 122 (check_emdexp_st -> .)
    AND             reduce using rule 122 (check_emdexp_st -> .)
    MAIN            reduce using rule 122 (check_emdexp_st -> .)
    FUNCTION        reduce using rule 122 (check_emdexp_st -> .)
    VAR             reduce using rule 122 (check_emdexp_st -> .)
    RETURN          reduce using rule 122 (check_emdexp_st -> .)
    WHILE           reduce using rule 122 (check_emdexp_st -> .)
    IF              reduce using rule 122 (check_emdexp_st -> .)
    PRINT           reduce using rule 122 (check_emdexp_st -> .)
    READ            reduce using rule 122 (check_emdexp_st -> .)
    ID              reduce using rule 122 (check_emdexp_st -> .)
    LPAREN          reduce using rule 122 (check_emdexp_st -> .)
    CTESTR          reduce using rule 122 (check_emdexp_st -> .)
    CTEINT          reduce using rule 122 (check_emdexp_st -> .)
    CTEFLT          reduce using rule 122 (check_emdexp_st -> .)
    FALSE           reduce using rule 122 (check_emdexp_st -> .)
    TRUE            reduce using rule 122 (check_emdexp_st -> .)
    $end            reduce using rule 122 (check_emdexp_st -> .)
    SCOLON          reduce using rule 122 (check_emdexp_st -> .)
    RPAREN          reduce using rule 122 (check_emdexp_st -> .)
    RBRCKT          reduce using rule 122 (check_emdexp_st -> .)
    RCURL           reduce using rule 122 (check_emdexp_st -> .)
    COMMA           reduce using rule 122 (check_emdexp_st -> .)

    check_emdexp_st                shift and go to state 201

state 170

    (70) funccall -> ID FCALL LPAREN validate_fid push_oper_ctx . fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (71) fcallparams -> . empty
    (72) fcallparams -> . fcallterm fcallparamdv
    (104) empty -> .
    (75) fcallterm -> . expr add_params
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RPAREN          reduce using rule 104 (empty -> .)
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    fcallparams                    shift and go to state 202
    empty                          shift and go to state 203
    fcallterm                      shift and go to state 204
    expr                           shift and go to state 205
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 171

    (101) varidx -> ID LBRCKT validate_arr push_oper_ctx expr . RBRCKT pop_oper_ctx gen_vdim arrindex
    RBRCKT          shift and go to state 206


state 172

    (8) main -> MAIN LPAREN RPAREN LCURL maindv .
    MAIN            reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    FUNCTION        reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    VAR             reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    RETURN          reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    WHILE           reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    IF              reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    PRINT           reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    READ            reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    ID              reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    LPAREN          reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    CTESTR          reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    CTEINT          reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    CTEFLT          reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    FALSE           reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    TRUE            reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)
    $end            reduce using rule 8 (main -> MAIN LPAREN RPAREN LCURL maindv .)


state 173

    (9) maindv -> RCURL .
    MAIN            reduce using rule 9 (maindv -> RCURL .)
    FUNCTION        reduce using rule 9 (maindv -> RCURL .)
    VAR             reduce using rule 9 (maindv -> RCURL .)
    RETURN          reduce using rule 9 (maindv -> RCURL .)
    WHILE           reduce using rule 9 (maindv -> RCURL .)
    IF              reduce using rule 9 (maindv -> RCURL .)
    PRINT           reduce using rule 9 (maindv -> RCURL .)
    READ            reduce using rule 9 (maindv -> RCURL .)
    ID              reduce using rule 9 (maindv -> RCURL .)
    LPAREN          reduce using rule 9 (maindv -> RCURL .)
    CTESTR          reduce using rule 9 (maindv -> RCURL .)
    CTEINT          reduce using rule 9 (maindv -> RCURL .)
    CTEFLT          reduce using rule 9 (maindv -> RCURL .)
    FALSE           reduce using rule 9 (maindv -> RCURL .)
    TRUE            reduce using rule 9 (maindv -> RCURL .)
    $end            reduce using rule 9 (maindv -> RCURL .)


state 174

    (10) maindv -> statement . maindv
    (9) maindv -> . RCURL
    (10) maindv -> . statement maindv
    (11) maindv -> . vars maindv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 173
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    statement                      shift and go to state 174
    maindv                         shift and go to state 207
    vars                           shift and go to state 175
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 175

    (11) maindv -> vars . maindv
    (9) maindv -> . RCURL
    (10) maindv -> . statement maindv
    (11) maindv -> . vars maindv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 173
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    vars                           shift and go to state 175
    maindv                         shift and go to state 208
    statement                      shift and go to state 174
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 176

    (66) pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .
    FDIV            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    DIV             reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    MULT            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    EXP             reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    SUB             reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    ADD             reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    GTEQ            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    LTEQ            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    NOTEQ           reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    EQ              reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    GT              reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    LT              reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    OR              reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    AND             reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    MAIN            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    FUNCTION        reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    VAR             reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    RETURN          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    WHILE           reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    IF              reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    PRINT           reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    READ            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    ID              reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    LPAREN          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    CTESTR          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    CTEINT          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    CTEFLT          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    FALSE           reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    TRUE            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    $end            reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    SCOLON          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    RPAREN          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    RBRCKT          reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    RCURL           reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)
    COMMA           reduce using rule 66 (pexp -> LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx .)


state 177

    (23) function -> FUNCTION typefunc ID save_func LPAREN . funcparams RPAREN LCURL add_fqid funcstat remove_fscope
    (26) funcparams -> . empty
    (27) funcparams -> . params
    (104) empty -> .
    (28) params -> . vtype ID save_param paramsdv
    (13) vtype -> . TSTR
    (14) vtype -> . TFLT
    (15) vtype -> . TINT
    (16) vtype -> . TBOOL
    RPAREN          reduce using rule 104 (empty -> .)
    TSTR            shift and go to state 58
    TFLT            shift and go to state 59
    TINT            shift and go to state 60
    TBOOL           shift and go to state 61

    funcparams                     shift and go to state 209
    empty                          shift and go to state 210
    params                         shift and go to state 211
    vtype                          shift and go to state 212

state 178

    (12) vars -> VAR vtype add_cvtype COLON listids . SCOLON reset_vtype
    SCOLON          shift and go to state 213


state 179

    (17) listids -> ID . LBRCKT CTEINT RBRCKT store_arrid dimlist def_dims listdv
    (18) listids -> ID . store_varid listdv
    (108) store_varid -> .
    LBRCKT          shift and go to state 214
    COMMA           reduce using rule 108 (store_varid -> .)
    SCOLON          reduce using rule 108 (store_varid -> .)

    store_varid                    shift and go to state 215

state 180

    (92) wwhile -> WHILE add_wpquad LPAREN expr RPAREN . gen_wquad DO LCURL whiledv add_wquad
    (138) gen_wquad -> .
    DO              reduce using rule 138 (gen_wquad -> .)

    gen_wquad                      shift and go to state 216

state 181

    (87) cond -> IF LPAREN expr RPAREN LCURL . gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF LPAREN expr RPAREN LCURL . gen_cond_quad condst RCURL add_jquad
    (134) gen_cond_quad -> .
    RETURN          reduce using rule 134 (gen_cond_quad -> .)
    WHILE           reduce using rule 134 (gen_cond_quad -> .)
    IF              reduce using rule 134 (gen_cond_quad -> .)
    PRINT           reduce using rule 134 (gen_cond_quad -> .)
    READ            reduce using rule 134 (gen_cond_quad -> .)
    ID              reduce using rule 134 (gen_cond_quad -> .)
    LPAREN          reduce using rule 134 (gen_cond_quad -> .)
    CTESTR          reduce using rule 134 (gen_cond_quad -> .)
    CTEINT          reduce using rule 134 (gen_cond_quad -> .)
    CTEFLT          reduce using rule 134 (gen_cond_quad -> .)
    FALSE           reduce using rule 134 (gen_cond_quad -> .)
    TRUE            reduce using rule 134 (gen_cond_quad -> .)

    gen_cond_quad                  shift and go to state 217

state 182

    (78) pprint -> PRINT LPAREN printlist RPAREN gen_print_quads .
    SCOLON          reduce using rule 78 (pprint -> PRINT LPAREN printlist RPAREN gen_print_quads .)


state 183

    (81) printlistdv -> COMMA printlist .
    RPAREN          reduce using rule 81 (printlistdv -> COMMA printlist .)


state 184

    (83) printerm -> varidx gen_fidx push_printidl .
    COMMA           reduce using rule 83 (printerm -> varidx gen_fidx push_printidl .)
    RPAREN          reduce using rule 83 (printerm -> varidx gen_fidx push_printidl .)


state 185

    (76) read -> READ LPAREN varidx gen_fidx gen_idxread . RPAREN
    RPAREN          shift and go to state 218


state 186

    (77) read -> READ LPAREN ID RPAREN gen_read .
    SCOLON          reduce using rule 77 (read -> READ LPAREN ID RPAREN gen_read .)


state 187

    (67) assign -> varidx gen_fidx ASGN expr gen_idx_assign .
    SCOLON          reduce using rule 67 (assign -> varidx gen_fidx ASGN expr gen_idx_assign .)


state 188

    (45) exprdv -> bexp OR add_oper exprdv check_expr_st .
    MAIN            reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    FUNCTION        reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    VAR             reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    RETURN          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    WHILE           reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    IF              reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    PRINT           reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    READ            reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    ID              reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    LPAREN          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    CTESTR          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    CTEINT          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    CTEFLT          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    FALSE           reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    TRUE            reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    $end            reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    SCOLON          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    RPAREN          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    RBRCKT          reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    RCURL           reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)
    COMMA           reduce using rule 45 (exprdv -> bexp OR add_oper exprdv check_expr_st .)


state 189

    (46) exprdv -> bexp AND add_oper exprdv check_expr_st .
    MAIN            reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    FUNCTION        reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    VAR             reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    RETURN          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    WHILE           reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    IF              reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    PRINT           reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    READ            reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    ID              reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    LPAREN          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    CTESTR          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    CTEINT          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    CTEFLT          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    FALSE           reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    TRUE            reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    $end            reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    SCOLON          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    RPAREN          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    RBRCKT          reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    RCURL           reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)
    COMMA           reduce using rule 46 (exprdv -> bexp AND add_oper exprdv check_expr_st .)


state 190

    (48) bexp -> asexp GTEQ add_oper bexp check_bexp_st .
    OR              reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    AND             reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    MAIN            reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    FUNCTION        reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    VAR             reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    RETURN          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    WHILE           reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    IF              reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    PRINT           reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    READ            reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    ID              reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    LPAREN          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    CTESTR          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    CTEINT          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    CTEFLT          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    FALSE           reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    TRUE            reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    $end            reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    SCOLON          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    RPAREN          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    RBRCKT          reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    RCURL           reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)
    COMMA           reduce using rule 48 (bexp -> asexp GTEQ add_oper bexp check_bexp_st .)


state 191

    (49) bexp -> asexp LTEQ add_oper bexp check_bexp_st .
    OR              reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    AND             reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    MAIN            reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    FUNCTION        reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    VAR             reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    RETURN          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    WHILE           reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    IF              reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    PRINT           reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    READ            reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    ID              reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    LPAREN          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    CTESTR          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    CTEINT          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    CTEFLT          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    FALSE           reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    TRUE            reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    $end            reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    SCOLON          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    RPAREN          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    RBRCKT          reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    RCURL           reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)
    COMMA           reduce using rule 49 (bexp -> asexp LTEQ add_oper bexp check_bexp_st .)


state 192

    (50) bexp -> asexp NOTEQ add_oper bexp check_bexp_st .
    OR              reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    AND             reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    MAIN            reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    FUNCTION        reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    VAR             reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    RETURN          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    WHILE           reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    IF              reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    PRINT           reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    READ            reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    ID              reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    LPAREN          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    CTESTR          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    CTEINT          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    CTEFLT          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    FALSE           reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    TRUE            reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    $end            reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    SCOLON          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    RPAREN          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    RBRCKT          reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    RCURL           reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)
    COMMA           reduce using rule 50 (bexp -> asexp NOTEQ add_oper bexp check_bexp_st .)


state 193

    (51) bexp -> asexp EQ add_oper bexp check_bexp_st .
    OR              reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    AND             reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    MAIN            reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    FUNCTION        reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    VAR             reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    RETURN          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    WHILE           reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    IF              reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    PRINT           reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    READ            reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    ID              reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    LPAREN          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    CTESTR          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    CTEINT          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    CTEFLT          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    FALSE           reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    TRUE            reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    $end            reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    SCOLON          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    RPAREN          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    RBRCKT          reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    RCURL           reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)
    COMMA           reduce using rule 51 (bexp -> asexp EQ add_oper bexp check_bexp_st .)


state 194

    (52) bexp -> asexp GT add_oper bexp check_bexp_st .
    OR              reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    AND             reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    MAIN            reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    FUNCTION        reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    VAR             reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    RETURN          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    WHILE           reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    IF              reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    PRINT           reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    READ            reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    ID              reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    LPAREN          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    CTESTR          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    CTEINT          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    CTEFLT          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    FALSE           reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    TRUE            reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    $end            reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    SCOLON          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    RPAREN          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    RBRCKT          reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    RCURL           reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)
    COMMA           reduce using rule 52 (bexp -> asexp GT add_oper bexp check_bexp_st .)


state 195

    (53) bexp -> asexp LT add_oper bexp check_bexp_st .
    OR              reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    AND             reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    MAIN            reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    FUNCTION        reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    VAR             reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    RETURN          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    WHILE           reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    IF              reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    PRINT           reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    READ            reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    ID              reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    LPAREN          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    CTESTR          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    CTEINT          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    CTEFLT          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    FALSE           reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    TRUE            reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    $end            reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    SCOLON          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    RPAREN          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    RBRCKT          reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    RCURL           reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)
    COMMA           reduce using rule 53 (bexp -> asexp LT add_oper bexp check_bexp_st .)


state 196

    (55) asexp -> emdexp SUB add_oper asexp check_asexp_st .
    GTEQ            reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    LTEQ            reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    NOTEQ           reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    EQ              reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    GT              reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    LT              reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    OR              reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    AND             reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    MAIN            reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    FUNCTION        reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    VAR             reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    RETURN          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    WHILE           reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    IF              reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    PRINT           reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    READ            reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    ID              reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    LPAREN          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    CTESTR          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    CTEINT          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    CTEFLT          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    FALSE           reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    TRUE            reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    $end            reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    SCOLON          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    RPAREN          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    RBRCKT          reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    RCURL           reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)
    COMMA           reduce using rule 55 (asexp -> emdexp SUB add_oper asexp check_asexp_st .)


state 197

    (56) asexp -> emdexp ADD add_oper asexp check_asexp_st .
    GTEQ            reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    LTEQ            reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    NOTEQ           reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    EQ              reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    GT              reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    LT              reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    OR              reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    AND             reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    MAIN            reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    FUNCTION        reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    VAR             reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    RETURN          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    WHILE           reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    IF              reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    PRINT           reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    READ            reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    ID              reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    LPAREN          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    CTESTR          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    CTEINT          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    CTEFLT          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    FALSE           reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    TRUE            reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    $end            reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    SCOLON          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    RPAREN          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    RBRCKT          reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    RCURL           reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)
    COMMA           reduce using rule 56 (asexp -> emdexp ADD add_oper asexp check_asexp_st .)


state 198

    (58) emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .
    SUB             reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    ADD             reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    GTEQ            reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    LTEQ            reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    NOTEQ           reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    EQ              reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    GT              reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    LT              reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    OR              reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    AND             reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    MAIN            reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    FUNCTION        reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    VAR             reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    RETURN          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    WHILE           reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    IF              reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    PRINT           reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    READ            reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    ID              reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    LPAREN          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    CTESTR          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    CTEINT          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    CTEFLT          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    FALSE           reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    TRUE            reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    $end            reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    SCOLON          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    RPAREN          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    RBRCKT          reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    RCURL           reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)
    COMMA           reduce using rule 58 (emdexp -> pexp FDIV add_oper emdexp check_emdexp_st .)


state 199

    (59) emdexp -> pexp DIV add_oper emdexp check_emdexp_st .
    SUB             reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    ADD             reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    GTEQ            reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    LTEQ            reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    NOTEQ           reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    EQ              reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    GT              reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    LT              reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    OR              reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    AND             reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    MAIN            reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    FUNCTION        reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    VAR             reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    RETURN          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    WHILE           reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    IF              reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    PRINT           reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    READ            reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    ID              reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    LPAREN          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    CTESTR          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    CTEINT          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    CTEFLT          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    FALSE           reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    TRUE            reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    $end            reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    SCOLON          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    RPAREN          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    RBRCKT          reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    RCURL           reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)
    COMMA           reduce using rule 59 (emdexp -> pexp DIV add_oper emdexp check_emdexp_st .)


state 200

    (60) emdexp -> pexp MULT add_oper emdexp check_emdexp_st .
    SUB             reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    ADD             reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    GTEQ            reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    LTEQ            reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    NOTEQ           reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    EQ              reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    GT              reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    LT              reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    OR              reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    AND             reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    MAIN            reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    FUNCTION        reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    VAR             reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    RETURN          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    WHILE           reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    IF              reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    PRINT           reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    READ            reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    ID              reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    LPAREN          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    CTESTR          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    CTEINT          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    CTEFLT          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    FALSE           reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    TRUE            reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    $end            reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    SCOLON          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    RPAREN          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    RBRCKT          reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    RCURL           reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)
    COMMA           reduce using rule 60 (emdexp -> pexp MULT add_oper emdexp check_emdexp_st .)


state 201

    (61) emdexp -> pexp EXP add_oper emdexp check_emdexp_st .
    SUB             reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    ADD             reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    GTEQ            reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    LTEQ            reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    NOTEQ           reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    EQ              reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    GT              reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    LT              reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    OR              reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    AND             reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    MAIN            reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    FUNCTION        reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    VAR             reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    RETURN          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    WHILE           reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    IF              reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    PRINT           reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    READ            reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    ID              reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    LPAREN          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    CTESTR          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    CTEINT          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    CTEFLT          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    FALSE           reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    TRUE            reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    $end            reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    SCOLON          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    RPAREN          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    RBRCKT          reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    RCURL           reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)
    COMMA           reduce using rule 61 (emdexp -> pexp EXP add_oper emdexp check_emdexp_st .)


state 202

    (70) funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams . RPAREN pop_oper_ctx add_curr_pquad
    RPAREN          shift and go to state 219


state 203

    (71) fcallparams -> empty .
    RPAREN          reduce using rule 71 (fcallparams -> empty .)


state 204

    (72) fcallparams -> fcallterm . fcallparamdv
    (73) fcallparamdv -> . empty
    (74) fcallparamdv -> . COMMA fcallparams
    (104) empty -> .
    COMMA           shift and go to state 222
    RPAREN          reduce using rule 104 (empty -> .)

    fcallparamdv                   shift and go to state 220
    empty                          shift and go to state 221

state 205

    (75) fcallterm -> expr . add_params
    (147) add_params -> .
    COMMA           reduce using rule 147 (add_params -> .)
    RPAREN          reduce using rule 147 (add_params -> .)

    add_params                     shift and go to state 223

state 206

    (101) varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT . pop_oper_ctx gen_vdim arrindex
    (124) pop_oper_ctx -> .
    LBRCKT          reduce using rule 124 (pop_oper_ctx -> .)
    ASGN            reduce using rule 124 (pop_oper_ctx -> .)
    FDIV            reduce using rule 124 (pop_oper_ctx -> .)
    DIV             reduce using rule 124 (pop_oper_ctx -> .)
    MULT            reduce using rule 124 (pop_oper_ctx -> .)
    EXP             reduce using rule 124 (pop_oper_ctx -> .)
    SUB             reduce using rule 124 (pop_oper_ctx -> .)
    ADD             reduce using rule 124 (pop_oper_ctx -> .)
    GTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    LTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    NOTEQ           reduce using rule 124 (pop_oper_ctx -> .)
    EQ              reduce using rule 124 (pop_oper_ctx -> .)
    GT              reduce using rule 124 (pop_oper_ctx -> .)
    LT              reduce using rule 124 (pop_oper_ctx -> .)
    OR              reduce using rule 124 (pop_oper_ctx -> .)
    AND             reduce using rule 124 (pop_oper_ctx -> .)
    MAIN            reduce using rule 124 (pop_oper_ctx -> .)
    FUNCTION        reduce using rule 124 (pop_oper_ctx -> .)
    VAR             reduce using rule 124 (pop_oper_ctx -> .)
    RETURN          reduce using rule 124 (pop_oper_ctx -> .)
    WHILE           reduce using rule 124 (pop_oper_ctx -> .)
    IF              reduce using rule 124 (pop_oper_ctx -> .)
    PRINT           reduce using rule 124 (pop_oper_ctx -> .)
    READ            reduce using rule 124 (pop_oper_ctx -> .)
    ID              reduce using rule 124 (pop_oper_ctx -> .)
    LPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    CTESTR          reduce using rule 124 (pop_oper_ctx -> .)
    CTEINT          reduce using rule 124 (pop_oper_ctx -> .)
    CTEFLT          reduce using rule 124 (pop_oper_ctx -> .)
    FALSE           reduce using rule 124 (pop_oper_ctx -> .)
    TRUE            reduce using rule 124 (pop_oper_ctx -> .)
    $end            reduce using rule 124 (pop_oper_ctx -> .)
    SCOLON          reduce using rule 124 (pop_oper_ctx -> .)
    RPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    COMMA           reduce using rule 124 (pop_oper_ctx -> .)
    RBRCKT          reduce using rule 124 (pop_oper_ctx -> .)
    RCURL           reduce using rule 124 (pop_oper_ctx -> .)

    pop_oper_ctx                   shift and go to state 224

state 207

    (10) maindv -> statement maindv .
    MAIN            reduce using rule 10 (maindv -> statement maindv .)
    FUNCTION        reduce using rule 10 (maindv -> statement maindv .)
    VAR             reduce using rule 10 (maindv -> statement maindv .)
    RETURN          reduce using rule 10 (maindv -> statement maindv .)
    WHILE           reduce using rule 10 (maindv -> statement maindv .)
    IF              reduce using rule 10 (maindv -> statement maindv .)
    PRINT           reduce using rule 10 (maindv -> statement maindv .)
    READ            reduce using rule 10 (maindv -> statement maindv .)
    ID              reduce using rule 10 (maindv -> statement maindv .)
    LPAREN          reduce using rule 10 (maindv -> statement maindv .)
    CTESTR          reduce using rule 10 (maindv -> statement maindv .)
    CTEINT          reduce using rule 10 (maindv -> statement maindv .)
    CTEFLT          reduce using rule 10 (maindv -> statement maindv .)
    FALSE           reduce using rule 10 (maindv -> statement maindv .)
    TRUE            reduce using rule 10 (maindv -> statement maindv .)
    $end            reduce using rule 10 (maindv -> statement maindv .)


state 208

    (11) maindv -> vars maindv .
    MAIN            reduce using rule 11 (maindv -> vars maindv .)
    FUNCTION        reduce using rule 11 (maindv -> vars maindv .)
    VAR             reduce using rule 11 (maindv -> vars maindv .)
    RETURN          reduce using rule 11 (maindv -> vars maindv .)
    WHILE           reduce using rule 11 (maindv -> vars maindv .)
    IF              reduce using rule 11 (maindv -> vars maindv .)
    PRINT           reduce using rule 11 (maindv -> vars maindv .)
    READ            reduce using rule 11 (maindv -> vars maindv .)
    ID              reduce using rule 11 (maindv -> vars maindv .)
    LPAREN          reduce using rule 11 (maindv -> vars maindv .)
    CTESTR          reduce using rule 11 (maindv -> vars maindv .)
    CTEINT          reduce using rule 11 (maindv -> vars maindv .)
    CTEFLT          reduce using rule 11 (maindv -> vars maindv .)
    FALSE           reduce using rule 11 (maindv -> vars maindv .)
    TRUE            reduce using rule 11 (maindv -> vars maindv .)
    $end            reduce using rule 11 (maindv -> vars maindv .)


state 209

    (23) function -> FUNCTION typefunc ID save_func LPAREN funcparams . RPAREN LCURL add_fqid funcstat remove_fscope
    RPAREN          shift and go to state 225


state 210

    (26) funcparams -> empty .
    RPAREN          reduce using rule 26 (funcparams -> empty .)


state 211

    (27) funcparams -> params .
    RPAREN          reduce using rule 27 (funcparams -> params .)


state 212

    (28) params -> vtype . ID save_param paramsdv
    ID              shift and go to state 226


state 213

    (12) vars -> VAR vtype add_cvtype COLON listids SCOLON . reset_vtype
    (107) reset_vtype -> .
    MAIN            reduce using rule 107 (reset_vtype -> .)
    FUNCTION        reduce using rule 107 (reset_vtype -> .)
    VAR             reduce using rule 107 (reset_vtype -> .)
    RETURN          reduce using rule 107 (reset_vtype -> .)
    WHILE           reduce using rule 107 (reset_vtype -> .)
    IF              reduce using rule 107 (reset_vtype -> .)
    PRINT           reduce using rule 107 (reset_vtype -> .)
    READ            reduce using rule 107 (reset_vtype -> .)
    ID              reduce using rule 107 (reset_vtype -> .)
    LPAREN          reduce using rule 107 (reset_vtype -> .)
    CTESTR          reduce using rule 107 (reset_vtype -> .)
    CTEINT          reduce using rule 107 (reset_vtype -> .)
    CTEFLT          reduce using rule 107 (reset_vtype -> .)
    FALSE           reduce using rule 107 (reset_vtype -> .)
    TRUE            reduce using rule 107 (reset_vtype -> .)
    $end            reduce using rule 107 (reset_vtype -> .)
    RCURL           reduce using rule 107 (reset_vtype -> .)

    reset_vtype                    shift and go to state 227

state 214

    (17) listids -> ID LBRCKT . CTEINT RBRCKT store_arrid dimlist def_dims listdv
    CTEINT          shift and go to state 228


state 215

    (18) listids -> ID store_varid . listdv
    (21) listdv -> . empty
    (22) listdv -> . COMMA listids
    (104) empty -> .
    COMMA           shift and go to state 231
    SCOLON          reduce using rule 104 (empty -> .)

    listdv                         shift and go to state 229
    empty                          shift and go to state 230

state 216

    (92) wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad . DO LCURL whiledv add_wquad
    DO              shift and go to state 232


state 217

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad . condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad . condst RCURL add_jquad
    (89) condst -> . statement condstdv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 24
    condst                         shift and go to state 233
    statement                      shift and go to state 234
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 218

    (76) read -> READ LPAREN varidx gen_fidx gen_idxread RPAREN .
    SCOLON          reduce using rule 76 (read -> READ LPAREN varidx gen_fidx gen_idxread RPAREN .)


state 219

    (70) funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN . pop_oper_ctx add_curr_pquad
    (124) pop_oper_ctx -> .
    SCOLON          reduce using rule 124 (pop_oper_ctx -> .)
    FDIV            reduce using rule 124 (pop_oper_ctx -> .)
    DIV             reduce using rule 124 (pop_oper_ctx -> .)
    MULT            reduce using rule 124 (pop_oper_ctx -> .)
    EXP             reduce using rule 124 (pop_oper_ctx -> .)
    SUB             reduce using rule 124 (pop_oper_ctx -> .)
    ADD             reduce using rule 124 (pop_oper_ctx -> .)
    GTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    LTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    NOTEQ           reduce using rule 124 (pop_oper_ctx -> .)
    EQ              reduce using rule 124 (pop_oper_ctx -> .)
    GT              reduce using rule 124 (pop_oper_ctx -> .)
    LT              reduce using rule 124 (pop_oper_ctx -> .)
    OR              reduce using rule 124 (pop_oper_ctx -> .)
    AND             reduce using rule 124 (pop_oper_ctx -> .)
    MAIN            reduce using rule 124 (pop_oper_ctx -> .)
    FUNCTION        reduce using rule 124 (pop_oper_ctx -> .)
    VAR             reduce using rule 124 (pop_oper_ctx -> .)
    RETURN          reduce using rule 124 (pop_oper_ctx -> .)
    WHILE           reduce using rule 124 (pop_oper_ctx -> .)
    IF              reduce using rule 124 (pop_oper_ctx -> .)
    PRINT           reduce using rule 124 (pop_oper_ctx -> .)
    READ            reduce using rule 124 (pop_oper_ctx -> .)
    ID              reduce using rule 124 (pop_oper_ctx -> .)
    LPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    CTESTR          reduce using rule 124 (pop_oper_ctx -> .)
    CTEINT          reduce using rule 124 (pop_oper_ctx -> .)
    CTEFLT          reduce using rule 124 (pop_oper_ctx -> .)
    FALSE           reduce using rule 124 (pop_oper_ctx -> .)
    TRUE            reduce using rule 124 (pop_oper_ctx -> .)
    $end            reduce using rule 124 (pop_oper_ctx -> .)
    RPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    RBRCKT          reduce using rule 124 (pop_oper_ctx -> .)
    RCURL           reduce using rule 124 (pop_oper_ctx -> .)
    COMMA           reduce using rule 124 (pop_oper_ctx -> .)

    pop_oper_ctx                   shift and go to state 235

state 220

    (72) fcallparams -> fcallterm fcallparamdv .
    RPAREN          reduce using rule 72 (fcallparams -> fcallterm fcallparamdv .)


state 221

    (73) fcallparamdv -> empty .
    RPAREN          reduce using rule 73 (fcallparamdv -> empty .)


state 222

    (74) fcallparamdv -> COMMA . fcallparams
    (71) fcallparams -> . empty
    (72) fcallparams -> . fcallterm fcallparamdv
    (104) empty -> .
    (75) fcallterm -> . expr add_params
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RPAREN          reduce using rule 104 (empty -> .)
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    fcallparams                    shift and go to state 236
    empty                          shift and go to state 203
    fcallterm                      shift and go to state 204
    expr                           shift and go to state 205
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 223

    (75) fcallterm -> expr add_params .
    COMMA           reduce using rule 75 (fcallterm -> expr add_params .)
    RPAREN          reduce using rule 75 (fcallterm -> expr add_params .)


state 224

    (101) varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx . gen_vdim arrindex
    (115) gen_vdim -> .
    LBRCKT          reduce using rule 115 (gen_vdim -> .)
    ASGN            reduce using rule 115 (gen_vdim -> .)
    FDIV            reduce using rule 115 (gen_vdim -> .)
    DIV             reduce using rule 115 (gen_vdim -> .)
    MULT            reduce using rule 115 (gen_vdim -> .)
    EXP             reduce using rule 115 (gen_vdim -> .)
    SUB             reduce using rule 115 (gen_vdim -> .)
    ADD             reduce using rule 115 (gen_vdim -> .)
    GTEQ            reduce using rule 115 (gen_vdim -> .)
    LTEQ            reduce using rule 115 (gen_vdim -> .)
    NOTEQ           reduce using rule 115 (gen_vdim -> .)
    EQ              reduce using rule 115 (gen_vdim -> .)
    GT              reduce using rule 115 (gen_vdim -> .)
    LT              reduce using rule 115 (gen_vdim -> .)
    OR              reduce using rule 115 (gen_vdim -> .)
    AND             reduce using rule 115 (gen_vdim -> .)
    MAIN            reduce using rule 115 (gen_vdim -> .)
    FUNCTION        reduce using rule 115 (gen_vdim -> .)
    VAR             reduce using rule 115 (gen_vdim -> .)
    RETURN          reduce using rule 115 (gen_vdim -> .)
    WHILE           reduce using rule 115 (gen_vdim -> .)
    IF              reduce using rule 115 (gen_vdim -> .)
    PRINT           reduce using rule 115 (gen_vdim -> .)
    READ            reduce using rule 115 (gen_vdim -> .)
    ID              reduce using rule 115 (gen_vdim -> .)
    LPAREN          reduce using rule 115 (gen_vdim -> .)
    CTESTR          reduce using rule 115 (gen_vdim -> .)
    CTEINT          reduce using rule 115 (gen_vdim -> .)
    CTEFLT          reduce using rule 115 (gen_vdim -> .)
    FALSE           reduce using rule 115 (gen_vdim -> .)
    TRUE            reduce using rule 115 (gen_vdim -> .)
    $end            reduce using rule 115 (gen_vdim -> .)
    SCOLON          reduce using rule 115 (gen_vdim -> .)
    RPAREN          reduce using rule 115 (gen_vdim -> .)
    COMMA           reduce using rule 115 (gen_vdim -> .)
    RBRCKT          reduce using rule 115 (gen_vdim -> .)
    RCURL           reduce using rule 115 (gen_vdim -> .)

    gen_vdim                       shift and go to state 237

state 225

    (23) function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN . LCURL add_fqid funcstat remove_fscope
    LCURL           shift and go to state 238


state 226

    (28) params -> vtype ID . save_param paramsdv
    (141) save_param -> .
    COMMA           reduce using rule 141 (save_param -> .)
    RPAREN          reduce using rule 141 (save_param -> .)

    save_param                     shift and go to state 239

state 227

    (12) vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .
    MAIN            reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    FUNCTION        reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    VAR             reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    RETURN          reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    WHILE           reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    IF              reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    PRINT           reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    READ            reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    ID              reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    LPAREN          reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    CTESTR          reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    CTEINT          reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    CTEFLT          reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    FALSE           reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    TRUE            reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    $end            reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)
    RCURL           reduce using rule 12 (vars -> VAR vtype add_cvtype COLON listids SCOLON reset_vtype .)


state 228

    (17) listids -> ID LBRCKT CTEINT . RBRCKT store_arrid dimlist def_dims listdv
    RBRCKT          shift and go to state 240


state 229

    (18) listids -> ID store_varid listdv .
    SCOLON          reduce using rule 18 (listids -> ID store_varid listdv .)


state 230

    (21) listdv -> empty .
    SCOLON          reduce using rule 21 (listdv -> empty .)


state 231

    (22) listdv -> COMMA . listids
    (17) listids -> . ID LBRCKT CTEINT RBRCKT store_arrid dimlist def_dims listdv
    (18) listids -> . ID store_varid listdv
    ID              shift and go to state 179

    listids                        shift and go to state 241

state 232

    (92) wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO . LCURL whiledv add_wquad
    LCURL           shift and go to state 242


state 233

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst . RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst . RCURL add_jquad
    RCURL           shift and go to state 243


state 234

    (89) condst -> statement . condstdv
    (90) condstdv -> . empty
    (91) condstdv -> . condst
    (104) empty -> .
    (89) condst -> . statement condstdv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           reduce using rule 104 (empty -> .)
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    statement                      shift and go to state 234
    condstdv                       shift and go to state 244
    empty                          shift and go to state 245
    condst                         shift and go to state 246
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 235

    (70) funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx . add_curr_pquad
    (148) add_curr_pquad -> .
    SCOLON          reduce using rule 148 (add_curr_pquad -> .)
    FDIV            reduce using rule 148 (add_curr_pquad -> .)
    DIV             reduce using rule 148 (add_curr_pquad -> .)
    MULT            reduce using rule 148 (add_curr_pquad -> .)
    EXP             reduce using rule 148 (add_curr_pquad -> .)
    SUB             reduce using rule 148 (add_curr_pquad -> .)
    ADD             reduce using rule 148 (add_curr_pquad -> .)
    GTEQ            reduce using rule 148 (add_curr_pquad -> .)
    LTEQ            reduce using rule 148 (add_curr_pquad -> .)
    NOTEQ           reduce using rule 148 (add_curr_pquad -> .)
    EQ              reduce using rule 148 (add_curr_pquad -> .)
    GT              reduce using rule 148 (add_curr_pquad -> .)
    LT              reduce using rule 148 (add_curr_pquad -> .)
    OR              reduce using rule 148 (add_curr_pquad -> .)
    AND             reduce using rule 148 (add_curr_pquad -> .)
    MAIN            reduce using rule 148 (add_curr_pquad -> .)
    FUNCTION        reduce using rule 148 (add_curr_pquad -> .)
    VAR             reduce using rule 148 (add_curr_pquad -> .)
    RETURN          reduce using rule 148 (add_curr_pquad -> .)
    WHILE           reduce using rule 148 (add_curr_pquad -> .)
    IF              reduce using rule 148 (add_curr_pquad -> .)
    PRINT           reduce using rule 148 (add_curr_pquad -> .)
    READ            reduce using rule 148 (add_curr_pquad -> .)
    ID              reduce using rule 148 (add_curr_pquad -> .)
    LPAREN          reduce using rule 148 (add_curr_pquad -> .)
    CTESTR          reduce using rule 148 (add_curr_pquad -> .)
    CTEINT          reduce using rule 148 (add_curr_pquad -> .)
    CTEFLT          reduce using rule 148 (add_curr_pquad -> .)
    FALSE           reduce using rule 148 (add_curr_pquad -> .)
    TRUE            reduce using rule 148 (add_curr_pquad -> .)
    $end            reduce using rule 148 (add_curr_pquad -> .)
    RPAREN          reduce using rule 148 (add_curr_pquad -> .)
    RBRCKT          reduce using rule 148 (add_curr_pquad -> .)
    RCURL           reduce using rule 148 (add_curr_pquad -> .)
    COMMA           reduce using rule 148 (add_curr_pquad -> .)

    add_curr_pquad                 shift and go to state 247

state 236

    (74) fcallparamdv -> COMMA fcallparams .
    RPAREN          reduce using rule 74 (fcallparamdv -> COMMA fcallparams .)


state 237

    (101) varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim . arrindex
    (102) arrindex -> . empty
    (103) arrindex -> . LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (104) empty -> .
    LBRCKT          shift and go to state 248
    ASGN            reduce using rule 104 (empty -> .)
    FDIV            reduce using rule 104 (empty -> .)
    DIV             reduce using rule 104 (empty -> .)
    MULT            reduce using rule 104 (empty -> .)
    EXP             reduce using rule 104 (empty -> .)
    SUB             reduce using rule 104 (empty -> .)
    ADD             reduce using rule 104 (empty -> .)
    GTEQ            reduce using rule 104 (empty -> .)
    LTEQ            reduce using rule 104 (empty -> .)
    NOTEQ           reduce using rule 104 (empty -> .)
    EQ              reduce using rule 104 (empty -> .)
    GT              reduce using rule 104 (empty -> .)
    LT              reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)
    FUNCTION        reduce using rule 104 (empty -> .)
    VAR             reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    WHILE           reduce using rule 104 (empty -> .)
    IF              reduce using rule 104 (empty -> .)
    PRINT           reduce using rule 104 (empty -> .)
    READ            reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    LPAREN          reduce using rule 104 (empty -> .)
    CTESTR          reduce using rule 104 (empty -> .)
    CTEINT          reduce using rule 104 (empty -> .)
    CTEFLT          reduce using rule 104 (empty -> .)
    FALSE           reduce using rule 104 (empty -> .)
    TRUE            reduce using rule 104 (empty -> .)
    $end            reduce using rule 104 (empty -> .)
    SCOLON          reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RBRCKT          reduce using rule 104 (empty -> .)
    RCURL           reduce using rule 104 (empty -> .)

    arrindex                       shift and go to state 249
    empty                          shift and go to state 250

state 238

    (23) function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL . add_fqid funcstat remove_fscope
    (142) add_fqid -> .
    RCURL           reduce using rule 142 (add_fqid -> .)
    VAR             reduce using rule 142 (add_fqid -> .)
    RETURN          reduce using rule 142 (add_fqid -> .)
    WHILE           reduce using rule 142 (add_fqid -> .)
    IF              reduce using rule 142 (add_fqid -> .)
    PRINT           reduce using rule 142 (add_fqid -> .)
    READ            reduce using rule 142 (add_fqid -> .)
    ID              reduce using rule 142 (add_fqid -> .)
    LPAREN          reduce using rule 142 (add_fqid -> .)
    CTESTR          reduce using rule 142 (add_fqid -> .)
    CTEINT          reduce using rule 142 (add_fqid -> .)
    CTEFLT          reduce using rule 142 (add_fqid -> .)
    FALSE           reduce using rule 142 (add_fqid -> .)
    TRUE            reduce using rule 142 (add_fqid -> .)

    add_fqid                       shift and go to state 251

state 239

    (28) params -> vtype ID save_param . paramsdv
    (29) paramsdv -> . empty
    (30) paramsdv -> . COMMA params
    (104) empty -> .
    COMMA           shift and go to state 254
    RPAREN          reduce using rule 104 (empty -> .)

    paramsdv                       shift and go to state 252
    empty                          shift and go to state 253

state 240

    (17) listids -> ID LBRCKT CTEINT RBRCKT . store_arrid dimlist def_dims listdv
    (109) store_arrid -> .
    LBRCKT          reduce using rule 109 (store_arrid -> .)
    COMMA           reduce using rule 109 (store_arrid -> .)
    SCOLON          reduce using rule 109 (store_arrid -> .)

    store_arrid                    shift and go to state 255

state 241

    (22) listdv -> COMMA listids .
    SCOLON          reduce using rule 22 (listdv -> COMMA listids .)


state 242

    (92) wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL . whiledv add_wquad
    (93) whiledv -> . RCURL
    (94) whiledv -> . statement whiledv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 257
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 24
    whiledv                        shift and go to state 256
    statement                      shift and go to state 258
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 243

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL . gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL . add_jquad
    (136) gen_egoto -> .
    (135) add_jquad -> .
    ELSE            reduce using rule 136 (gen_egoto -> .)
    MAIN            reduce using rule 135 (add_jquad -> .)
    FUNCTION        reduce using rule 135 (add_jquad -> .)
    VAR             reduce using rule 135 (add_jquad -> .)
    RETURN          reduce using rule 135 (add_jquad -> .)
    WHILE           reduce using rule 135 (add_jquad -> .)
    IF              reduce using rule 135 (add_jquad -> .)
    PRINT           reduce using rule 135 (add_jquad -> .)
    READ            reduce using rule 135 (add_jquad -> .)
    ID              reduce using rule 135 (add_jquad -> .)
    LPAREN          reduce using rule 135 (add_jquad -> .)
    CTESTR          reduce using rule 135 (add_jquad -> .)
    CTEINT          reduce using rule 135 (add_jquad -> .)
    CTEFLT          reduce using rule 135 (add_jquad -> .)
    FALSE           reduce using rule 135 (add_jquad -> .)
    TRUE            reduce using rule 135 (add_jquad -> .)
    $end            reduce using rule 135 (add_jquad -> .)
    RCURL           reduce using rule 135 (add_jquad -> .)

    gen_egoto                      shift and go to state 259
    add_jquad                      shift and go to state 260

state 244

    (89) condst -> statement condstdv .
    RCURL           reduce using rule 89 (condst -> statement condstdv .)


state 245

    (90) condstdv -> empty .
    RCURL           reduce using rule 90 (condstdv -> empty .)


state 246

    (91) condstdv -> condst .
    RCURL           reduce using rule 91 (condstdv -> condst .)


state 247

    (70) funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .
    SCOLON          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    FDIV            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    DIV             reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    MULT            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    EXP             reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    SUB             reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    ADD             reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    GTEQ            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    LTEQ            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    NOTEQ           reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    EQ              reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    GT              reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    LT              reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    OR              reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    AND             reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    MAIN            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    FUNCTION        reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    VAR             reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    RETURN          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    WHILE           reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    IF              reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    PRINT           reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    READ            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    ID              reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    LPAREN          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    CTESTR          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    CTEINT          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    CTEFLT          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    FALSE           reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    TRUE            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    $end            reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    RPAREN          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    RBRCKT          reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    RCURL           reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)
    COMMA           reduce using rule 70 (funccall -> ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad .)


state 248

    (103) arrindex -> LBRCKT . push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (123) push_oper_ctx -> .
    ID              reduce using rule 123 (push_oper_ctx -> .)
    LPAREN          reduce using rule 123 (push_oper_ctx -> .)
    CTESTR          reduce using rule 123 (push_oper_ctx -> .)
    CTEINT          reduce using rule 123 (push_oper_ctx -> .)
    CTEFLT          reduce using rule 123 (push_oper_ctx -> .)
    FALSE           reduce using rule 123 (push_oper_ctx -> .)
    TRUE            reduce using rule 123 (push_oper_ctx -> .)

    push_oper_ctx                  shift and go to state 261

state 249

    (101) varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .
    ASGN            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    FDIV            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    DIV             reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    MULT            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    EXP             reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    SUB             reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    ADD             reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    GTEQ            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    LTEQ            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    NOTEQ           reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    EQ              reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    GT              reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    LT              reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    OR              reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    AND             reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    MAIN            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    FUNCTION        reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    VAR             reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RETURN          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    WHILE           reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    IF              reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    PRINT           reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    READ            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    ID              reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    LPAREN          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    CTESTR          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    CTEINT          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    CTEFLT          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    FALSE           reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    TRUE            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    $end            reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    SCOLON          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RPAREN          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    COMMA           reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RBRCKT          reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RCURL           reduce using rule 101 (varidx -> ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)


state 250

    (102) arrindex -> empty .
    ASGN            reduce using rule 102 (arrindex -> empty .)
    FDIV            reduce using rule 102 (arrindex -> empty .)
    DIV             reduce using rule 102 (arrindex -> empty .)
    MULT            reduce using rule 102 (arrindex -> empty .)
    EXP             reduce using rule 102 (arrindex -> empty .)
    SUB             reduce using rule 102 (arrindex -> empty .)
    ADD             reduce using rule 102 (arrindex -> empty .)
    GTEQ            reduce using rule 102 (arrindex -> empty .)
    LTEQ            reduce using rule 102 (arrindex -> empty .)
    NOTEQ           reduce using rule 102 (arrindex -> empty .)
    EQ              reduce using rule 102 (arrindex -> empty .)
    GT              reduce using rule 102 (arrindex -> empty .)
    LT              reduce using rule 102 (arrindex -> empty .)
    OR              reduce using rule 102 (arrindex -> empty .)
    AND             reduce using rule 102 (arrindex -> empty .)
    MAIN            reduce using rule 102 (arrindex -> empty .)
    FUNCTION        reduce using rule 102 (arrindex -> empty .)
    VAR             reduce using rule 102 (arrindex -> empty .)
    RETURN          reduce using rule 102 (arrindex -> empty .)
    WHILE           reduce using rule 102 (arrindex -> empty .)
    IF              reduce using rule 102 (arrindex -> empty .)
    PRINT           reduce using rule 102 (arrindex -> empty .)
    READ            reduce using rule 102 (arrindex -> empty .)
    ID              reduce using rule 102 (arrindex -> empty .)
    LPAREN          reduce using rule 102 (arrindex -> empty .)
    CTESTR          reduce using rule 102 (arrindex -> empty .)
    CTEINT          reduce using rule 102 (arrindex -> empty .)
    CTEFLT          reduce using rule 102 (arrindex -> empty .)
    FALSE           reduce using rule 102 (arrindex -> empty .)
    TRUE            reduce using rule 102 (arrindex -> empty .)
    $end            reduce using rule 102 (arrindex -> empty .)
    SCOLON          reduce using rule 102 (arrindex -> empty .)
    RPAREN          reduce using rule 102 (arrindex -> empty .)
    COMMA           reduce using rule 102 (arrindex -> empty .)
    RBRCKT          reduce using rule 102 (arrindex -> empty .)
    RCURL           reduce using rule 102 (arrindex -> empty .)


state 251

    (23) function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid . funcstat remove_fscope
    (31) funcstat -> . RCURL
    (32) funcstat -> . statement funcstat
    (33) funcstat -> . vars funcstat
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 263
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    funcstat                       shift and go to state 262
    statement                      shift and go to state 264
    vars                           shift and go to state 265
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 252

    (28) params -> vtype ID save_param paramsdv .
    RPAREN          reduce using rule 28 (params -> vtype ID save_param paramsdv .)


state 253

    (29) paramsdv -> empty .
    RPAREN          reduce using rule 29 (paramsdv -> empty .)


state 254

    (30) paramsdv -> COMMA . params
    (28) params -> . vtype ID save_param paramsdv
    (13) vtype -> . TSTR
    (14) vtype -> . TFLT
    (15) vtype -> . TINT
    (16) vtype -> . TBOOL
    TSTR            shift and go to state 58
    TFLT            shift and go to state 59
    TINT            shift and go to state 60
    TBOOL           shift and go to state 61

    params                         shift and go to state 266
    vtype                          shift and go to state 212

state 255

    (17) listids -> ID LBRCKT CTEINT RBRCKT store_arrid . dimlist def_dims listdv
    (19) dimlist -> . empty
    (20) dimlist -> . LBRCKT CTEINT RBRCKT append_dim dimlist
    (104) empty -> .
    LBRCKT          shift and go to state 267
    COMMA           reduce using rule 104 (empty -> .)
    SCOLON          reduce using rule 104 (empty -> .)

    dimlist                        shift and go to state 268
    empty                          shift and go to state 269

state 256

    (92) wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv . add_wquad
    (139) add_wquad -> .
    MAIN            reduce using rule 139 (add_wquad -> .)
    FUNCTION        reduce using rule 139 (add_wquad -> .)
    VAR             reduce using rule 139 (add_wquad -> .)
    RETURN          reduce using rule 139 (add_wquad -> .)
    WHILE           reduce using rule 139 (add_wquad -> .)
    IF              reduce using rule 139 (add_wquad -> .)
    PRINT           reduce using rule 139 (add_wquad -> .)
    READ            reduce using rule 139 (add_wquad -> .)
    ID              reduce using rule 139 (add_wquad -> .)
    LPAREN          reduce using rule 139 (add_wquad -> .)
    CTESTR          reduce using rule 139 (add_wquad -> .)
    CTEINT          reduce using rule 139 (add_wquad -> .)
    CTEFLT          reduce using rule 139 (add_wquad -> .)
    FALSE           reduce using rule 139 (add_wquad -> .)
    TRUE            reduce using rule 139 (add_wquad -> .)
    $end            reduce using rule 139 (add_wquad -> .)
    RCURL           reduce using rule 139 (add_wquad -> .)

    add_wquad                      shift and go to state 270

state 257

    (93) whiledv -> RCURL .
    MAIN            reduce using rule 93 (whiledv -> RCURL .)
    FUNCTION        reduce using rule 93 (whiledv -> RCURL .)
    VAR             reduce using rule 93 (whiledv -> RCURL .)
    RETURN          reduce using rule 93 (whiledv -> RCURL .)
    WHILE           reduce using rule 93 (whiledv -> RCURL .)
    IF              reduce using rule 93 (whiledv -> RCURL .)
    PRINT           reduce using rule 93 (whiledv -> RCURL .)
    READ            reduce using rule 93 (whiledv -> RCURL .)
    ID              reduce using rule 93 (whiledv -> RCURL .)
    LPAREN          reduce using rule 93 (whiledv -> RCURL .)
    CTESTR          reduce using rule 93 (whiledv -> RCURL .)
    CTEINT          reduce using rule 93 (whiledv -> RCURL .)
    CTEFLT          reduce using rule 93 (whiledv -> RCURL .)
    FALSE           reduce using rule 93 (whiledv -> RCURL .)
    TRUE            reduce using rule 93 (whiledv -> RCURL .)
    $end            reduce using rule 93 (whiledv -> RCURL .)
    RCURL           reduce using rule 93 (whiledv -> RCURL .)


state 258

    (94) whiledv -> statement . whiledv
    (93) whiledv -> . RCURL
    (94) whiledv -> . statement whiledv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 257
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    statement                      shift and go to state 258
    whiledv                        shift and go to state 271
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 259

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto . ELSE LCURL condst RCURL add_jquad
    ELSE            shift and go to state 272


state 260

    (88) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .
    MAIN            reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    FUNCTION        reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    VAR             reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    RETURN          reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    WHILE           reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    IF              reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    PRINT           reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    READ            reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    ID              reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    LPAREN          reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    CTESTR          reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    CTEINT          reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    CTEFLT          reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    FALSE           reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    TRUE            reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    $end            reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)
    RCURL           reduce using rule 88 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad .)


state 261

    (103) arrindex -> LBRCKT push_oper_ctx . expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (43) expr -> . exprdv
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    ID              shift and go to state 73
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 273
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    funccall                       shift and go to state 71
    varidx                         shift and go to state 72
    const                          shift and go to state 36

state 262

    (23) function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat . remove_fscope
    (144) remove_fscope -> .
    MAIN            reduce using rule 144 (remove_fscope -> .)
    FUNCTION        reduce using rule 144 (remove_fscope -> .)
    VAR             reduce using rule 144 (remove_fscope -> .)
    RETURN          reduce using rule 144 (remove_fscope -> .)
    WHILE           reduce using rule 144 (remove_fscope -> .)
    IF              reduce using rule 144 (remove_fscope -> .)
    PRINT           reduce using rule 144 (remove_fscope -> .)
    READ            reduce using rule 144 (remove_fscope -> .)
    ID              reduce using rule 144 (remove_fscope -> .)
    LPAREN          reduce using rule 144 (remove_fscope -> .)
    CTESTR          reduce using rule 144 (remove_fscope -> .)
    CTEINT          reduce using rule 144 (remove_fscope -> .)
    CTEFLT          reduce using rule 144 (remove_fscope -> .)
    FALSE           reduce using rule 144 (remove_fscope -> .)
    TRUE            reduce using rule 144 (remove_fscope -> .)
    $end            reduce using rule 144 (remove_fscope -> .)

    remove_fscope                  shift and go to state 274

state 263

    (31) funcstat -> RCURL .
    MAIN            reduce using rule 31 (funcstat -> RCURL .)
    FUNCTION        reduce using rule 31 (funcstat -> RCURL .)
    VAR             reduce using rule 31 (funcstat -> RCURL .)
    RETURN          reduce using rule 31 (funcstat -> RCURL .)
    WHILE           reduce using rule 31 (funcstat -> RCURL .)
    IF              reduce using rule 31 (funcstat -> RCURL .)
    PRINT           reduce using rule 31 (funcstat -> RCURL .)
    READ            reduce using rule 31 (funcstat -> RCURL .)
    ID              reduce using rule 31 (funcstat -> RCURL .)
    LPAREN          reduce using rule 31 (funcstat -> RCURL .)
    CTESTR          reduce using rule 31 (funcstat -> RCURL .)
    CTEINT          reduce using rule 31 (funcstat -> RCURL .)
    CTEFLT          reduce using rule 31 (funcstat -> RCURL .)
    FALSE           reduce using rule 31 (funcstat -> RCURL .)
    TRUE            reduce using rule 31 (funcstat -> RCURL .)
    $end            reduce using rule 31 (funcstat -> RCURL .)


state 264

    (32) funcstat -> statement . funcstat
    (31) funcstat -> . RCURL
    (32) funcstat -> . statement funcstat
    (33) funcstat -> . vars funcstat
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 263
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    statement                      shift and go to state 264
    funcstat                       shift and go to state 275
    vars                           shift and go to state 265
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 265

    (33) funcstat -> vars . funcstat
    (31) funcstat -> . RCURL
    (32) funcstat -> . statement funcstat
    (33) funcstat -> . vars funcstat
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (12) vars -> . VAR vtype add_cvtype COLON listids SCOLON reset_vtype
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RCURL           shift and go to state 263
    VAR             shift and go to state 15
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    vars                           shift and go to state 265
    funcstat                       shift and go to state 276
    statement                      shift and go to state 264
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    expr                           shift and go to state 24
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 266

    (30) paramsdv -> COMMA params .
    RPAREN          reduce using rule 30 (paramsdv -> COMMA params .)


state 267

    (20) dimlist -> LBRCKT . CTEINT RBRCKT append_dim dimlist
    CTEINT          shift and go to state 277


state 268

    (17) listids -> ID LBRCKT CTEINT RBRCKT store_arrid dimlist . def_dims listdv
    (111) def_dims -> .
    COMMA           reduce using rule 111 (def_dims -> .)
    SCOLON          reduce using rule 111 (def_dims -> .)

    def_dims                       shift and go to state 278

state 269

    (19) dimlist -> empty .
    COMMA           reduce using rule 19 (dimlist -> empty .)
    SCOLON          reduce using rule 19 (dimlist -> empty .)


state 270

    (92) wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .
    MAIN            reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    FUNCTION        reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    VAR             reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    RETURN          reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    WHILE           reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    IF              reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    PRINT           reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    READ            reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    ID              reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    LPAREN          reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    CTESTR          reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    CTEINT          reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    CTEFLT          reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    FALSE           reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    TRUE            reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    $end            reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)
    RCURL           reduce using rule 92 (wwhile -> WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad .)


state 271

    (94) whiledv -> statement whiledv .
    MAIN            reduce using rule 94 (whiledv -> statement whiledv .)
    FUNCTION        reduce using rule 94 (whiledv -> statement whiledv .)
    VAR             reduce using rule 94 (whiledv -> statement whiledv .)
    RETURN          reduce using rule 94 (whiledv -> statement whiledv .)
    WHILE           reduce using rule 94 (whiledv -> statement whiledv .)
    IF              reduce using rule 94 (whiledv -> statement whiledv .)
    PRINT           reduce using rule 94 (whiledv -> statement whiledv .)
    READ            reduce using rule 94 (whiledv -> statement whiledv .)
    ID              reduce using rule 94 (whiledv -> statement whiledv .)
    LPAREN          reduce using rule 94 (whiledv -> statement whiledv .)
    CTESTR          reduce using rule 94 (whiledv -> statement whiledv .)
    CTEINT          reduce using rule 94 (whiledv -> statement whiledv .)
    CTEFLT          reduce using rule 94 (whiledv -> statement whiledv .)
    FALSE           reduce using rule 94 (whiledv -> statement whiledv .)
    TRUE            reduce using rule 94 (whiledv -> statement whiledv .)
    $end            reduce using rule 94 (whiledv -> statement whiledv .)
    RCURL           reduce using rule 94 (whiledv -> statement whiledv .)


state 272

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE . LCURL condst RCURL add_jquad
    LCURL           shift and go to state 279


state 273

    (103) arrindex -> LBRCKT push_oper_ctx expr . RBRCKT pop_oper_ctx gen_vdim arrindex
    RBRCKT          shift and go to state 280


state 274

    (23) function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .
    MAIN            reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    FUNCTION        reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    VAR             reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    RETURN          reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    WHILE           reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    IF              reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    PRINT           reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    READ            reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    ID              reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    LPAREN          reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    CTESTR          reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    CTEINT          reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    CTEFLT          reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    FALSE           reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    TRUE            reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)
    $end            reduce using rule 23 (function -> FUNCTION typefunc ID save_func LPAREN funcparams RPAREN LCURL add_fqid funcstat remove_fscope .)


state 275

    (32) funcstat -> statement funcstat .
    MAIN            reduce using rule 32 (funcstat -> statement funcstat .)
    FUNCTION        reduce using rule 32 (funcstat -> statement funcstat .)
    VAR             reduce using rule 32 (funcstat -> statement funcstat .)
    RETURN          reduce using rule 32 (funcstat -> statement funcstat .)
    WHILE           reduce using rule 32 (funcstat -> statement funcstat .)
    IF              reduce using rule 32 (funcstat -> statement funcstat .)
    PRINT           reduce using rule 32 (funcstat -> statement funcstat .)
    READ            reduce using rule 32 (funcstat -> statement funcstat .)
    ID              reduce using rule 32 (funcstat -> statement funcstat .)
    LPAREN          reduce using rule 32 (funcstat -> statement funcstat .)
    CTESTR          reduce using rule 32 (funcstat -> statement funcstat .)
    CTEINT          reduce using rule 32 (funcstat -> statement funcstat .)
    CTEFLT          reduce using rule 32 (funcstat -> statement funcstat .)
    FALSE           reduce using rule 32 (funcstat -> statement funcstat .)
    TRUE            reduce using rule 32 (funcstat -> statement funcstat .)
    $end            reduce using rule 32 (funcstat -> statement funcstat .)


state 276

    (33) funcstat -> vars funcstat .
    MAIN            reduce using rule 33 (funcstat -> vars funcstat .)
    FUNCTION        reduce using rule 33 (funcstat -> vars funcstat .)
    VAR             reduce using rule 33 (funcstat -> vars funcstat .)
    RETURN          reduce using rule 33 (funcstat -> vars funcstat .)
    WHILE           reduce using rule 33 (funcstat -> vars funcstat .)
    IF              reduce using rule 33 (funcstat -> vars funcstat .)
    PRINT           reduce using rule 33 (funcstat -> vars funcstat .)
    READ            reduce using rule 33 (funcstat -> vars funcstat .)
    ID              reduce using rule 33 (funcstat -> vars funcstat .)
    LPAREN          reduce using rule 33 (funcstat -> vars funcstat .)
    CTESTR          reduce using rule 33 (funcstat -> vars funcstat .)
    CTEINT          reduce using rule 33 (funcstat -> vars funcstat .)
    CTEFLT          reduce using rule 33 (funcstat -> vars funcstat .)
    FALSE           reduce using rule 33 (funcstat -> vars funcstat .)
    TRUE            reduce using rule 33 (funcstat -> vars funcstat .)
    $end            reduce using rule 33 (funcstat -> vars funcstat .)


state 277

    (20) dimlist -> LBRCKT CTEINT . RBRCKT append_dim dimlist
    RBRCKT          shift and go to state 281


state 278

    (17) listids -> ID LBRCKT CTEINT RBRCKT store_arrid dimlist def_dims . listdv
    (21) listdv -> . empty
    (22) listdv -> . COMMA listids
    (104) empty -> .
    COMMA           shift and go to state 231
    SCOLON          reduce using rule 104 (empty -> .)

    listdv                         shift and go to state 282
    empty                          shift and go to state 230

state 279

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL . condst RCURL add_jquad
    (89) condst -> . statement condstdv
    (34) statement -> . rreturn SCOLON
    (35) statement -> . wwhile
    (36) statement -> . cond
    (37) statement -> . pprint SCOLON
    (38) statement -> . read SCOLON
    (39) statement -> . funccall SCOLON
    (40) statement -> . shrtassgn SCOLON
    (41) statement -> . assign SCOLON
    (42) statement -> . expr
    (95) rreturn -> . RETURN expr check_return
    (92) wwhile -> . WHILE add_wpquad LPAREN expr RPAREN gen_wquad DO LCURL whiledv add_wquad
    (87) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad
    (88) cond -> . IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL add_jquad
    (78) pprint -> . PRINT LPAREN printlist RPAREN gen_print_quads
    (76) read -> . READ LPAREN varidx gen_fidx gen_idxread RPAREN
    (77) read -> . READ LPAREN ID RPAREN gen_read
    (70) funccall -> . ID FCALL LPAREN validate_fid push_oper_ctx fcallparams RPAREN pop_oper_ctx add_curr_pquad
    (69) shrtassgn -> . ID SHRT expr gen_shrt_assign
    (67) assign -> . varidx gen_fidx ASGN expr gen_idx_assign
    (68) assign -> . ID ASGN expr gen_assign
    (43) expr -> . exprdv
    (101) varidx -> . ID LBRCKT validate_arr push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (44) exprdv -> . bexp check_expr_st
    (45) exprdv -> . bexp OR add_oper exprdv check_expr_st
    (46) exprdv -> . bexp AND add_oper exprdv check_expr_st
    (47) bexp -> . asexp check_bexp_st
    (48) bexp -> . asexp GTEQ add_oper bexp check_bexp_st
    (49) bexp -> . asexp LTEQ add_oper bexp check_bexp_st
    (50) bexp -> . asexp NOTEQ add_oper bexp check_bexp_st
    (51) bexp -> . asexp EQ add_oper bexp check_bexp_st
    (52) bexp -> . asexp GT add_oper bexp check_bexp_st
    (53) bexp -> . asexp LT add_oper bexp check_bexp_st
    (54) asexp -> . emdexp check_asexp_st
    (55) asexp -> . emdexp SUB add_oper asexp check_asexp_st
    (56) asexp -> . emdexp ADD add_oper asexp check_asexp_st
    (57) emdexp -> . pexp check_emdexp_st
    (58) emdexp -> . pexp FDIV add_oper emdexp check_emdexp_st
    (59) emdexp -> . pexp DIV add_oper emdexp check_emdexp_st
    (60) emdexp -> . pexp MULT add_oper emdexp check_emdexp_st
    (61) emdexp -> . pexp EXP add_oper emdexp check_emdexp_st
    (62) pexp -> . funccall add_funcv
    (63) pexp -> . varidx gen_tidx
    (64) pexp -> . ID add_vid
    (65) pexp -> . const save_const
    (66) pexp -> . LPAREN push_oper_ctx exprdv RPAREN pop_oper_ctx
    (96) const -> . CTESTR
    (97) const -> . CTEINT
    (98) const -> . CTEFLT
    (99) const -> . FALSE
    (100) const -> . TRUE
    RETURN          shift and go to state 25
    WHILE           shift and go to state 26
    IF              shift and go to state 27
    PRINT           shift and go to state 28
    READ            shift and go to state 29
    ID              shift and go to state 6
    LPAREN          shift and go to state 13
    CTESTR          shift and go to state 37
    CTEINT          shift and go to state 38
    CTEFLT          shift and go to state 39
    FALSE           shift and go to state 40
    TRUE            shift and go to state 41

    expr                           shift and go to state 24
    condst                         shift and go to state 283
    statement                      shift and go to state 234
    rreturn                        shift and go to state 16
    wwhile                         shift and go to state 17
    cond                           shift and go to state 18
    pprint                         shift and go to state 19
    read                           shift and go to state 20
    funccall                       shift and go to state 21
    shrtassgn                      shift and go to state 22
    assign                         shift and go to state 23
    varidx                         shift and go to state 30
    exprdv                         shift and go to state 31
    bexp                           shift and go to state 32
    asexp                          shift and go to state 33
    emdexp                         shift and go to state 34
    pexp                           shift and go to state 35
    const                          shift and go to state 36

state 280

    (103) arrindex -> LBRCKT push_oper_ctx expr RBRCKT . pop_oper_ctx gen_vdim arrindex
    (124) pop_oper_ctx -> .
    LBRCKT          reduce using rule 124 (pop_oper_ctx -> .)
    ASGN            reduce using rule 124 (pop_oper_ctx -> .)
    FDIV            reduce using rule 124 (pop_oper_ctx -> .)
    DIV             reduce using rule 124 (pop_oper_ctx -> .)
    MULT            reduce using rule 124 (pop_oper_ctx -> .)
    EXP             reduce using rule 124 (pop_oper_ctx -> .)
    SUB             reduce using rule 124 (pop_oper_ctx -> .)
    ADD             reduce using rule 124 (pop_oper_ctx -> .)
    GTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    LTEQ            reduce using rule 124 (pop_oper_ctx -> .)
    NOTEQ           reduce using rule 124 (pop_oper_ctx -> .)
    EQ              reduce using rule 124 (pop_oper_ctx -> .)
    GT              reduce using rule 124 (pop_oper_ctx -> .)
    LT              reduce using rule 124 (pop_oper_ctx -> .)
    OR              reduce using rule 124 (pop_oper_ctx -> .)
    AND             reduce using rule 124 (pop_oper_ctx -> .)
    MAIN            reduce using rule 124 (pop_oper_ctx -> .)
    FUNCTION        reduce using rule 124 (pop_oper_ctx -> .)
    VAR             reduce using rule 124 (pop_oper_ctx -> .)
    RETURN          reduce using rule 124 (pop_oper_ctx -> .)
    WHILE           reduce using rule 124 (pop_oper_ctx -> .)
    IF              reduce using rule 124 (pop_oper_ctx -> .)
    PRINT           reduce using rule 124 (pop_oper_ctx -> .)
    READ            reduce using rule 124 (pop_oper_ctx -> .)
    ID              reduce using rule 124 (pop_oper_ctx -> .)
    LPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    CTESTR          reduce using rule 124 (pop_oper_ctx -> .)
    CTEINT          reduce using rule 124 (pop_oper_ctx -> .)
    CTEFLT          reduce using rule 124 (pop_oper_ctx -> .)
    FALSE           reduce using rule 124 (pop_oper_ctx -> .)
    TRUE            reduce using rule 124 (pop_oper_ctx -> .)
    $end            reduce using rule 124 (pop_oper_ctx -> .)
    SCOLON          reduce using rule 124 (pop_oper_ctx -> .)
    RPAREN          reduce using rule 124 (pop_oper_ctx -> .)
    COMMA           reduce using rule 124 (pop_oper_ctx -> .)
    RBRCKT          reduce using rule 124 (pop_oper_ctx -> .)
    RCURL           reduce using rule 124 (pop_oper_ctx -> .)

    pop_oper_ctx                   shift and go to state 284

state 281

    (20) dimlist -> LBRCKT CTEINT RBRCKT . append_dim dimlist
    (110) append_dim -> .
    LBRCKT          reduce using rule 110 (append_dim -> .)
    COMMA           reduce using rule 110 (append_dim -> .)
    SCOLON          reduce using rule 110 (append_dim -> .)

    append_dim                     shift and go to state 285

state 282

    (17) listids -> ID LBRCKT CTEINT RBRCKT store_arrid dimlist def_dims listdv .
    SCOLON          reduce using rule 17 (listids -> ID LBRCKT CTEINT RBRCKT store_arrid dimlist def_dims listdv .)


state 283

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst . RCURL add_jquad
    RCURL           shift and go to state 286


state 284

    (103) arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx . gen_vdim arrindex
    (115) gen_vdim -> .
    LBRCKT          reduce using rule 115 (gen_vdim -> .)
    ASGN            reduce using rule 115 (gen_vdim -> .)
    FDIV            reduce using rule 115 (gen_vdim -> .)
    DIV             reduce using rule 115 (gen_vdim -> .)
    MULT            reduce using rule 115 (gen_vdim -> .)
    EXP             reduce using rule 115 (gen_vdim -> .)
    SUB             reduce using rule 115 (gen_vdim -> .)
    ADD             reduce using rule 115 (gen_vdim -> .)
    GTEQ            reduce using rule 115 (gen_vdim -> .)
    LTEQ            reduce using rule 115 (gen_vdim -> .)
    NOTEQ           reduce using rule 115 (gen_vdim -> .)
    EQ              reduce using rule 115 (gen_vdim -> .)
    GT              reduce using rule 115 (gen_vdim -> .)
    LT              reduce using rule 115 (gen_vdim -> .)
    OR              reduce using rule 115 (gen_vdim -> .)
    AND             reduce using rule 115 (gen_vdim -> .)
    MAIN            reduce using rule 115 (gen_vdim -> .)
    FUNCTION        reduce using rule 115 (gen_vdim -> .)
    VAR             reduce using rule 115 (gen_vdim -> .)
    RETURN          reduce using rule 115 (gen_vdim -> .)
    WHILE           reduce using rule 115 (gen_vdim -> .)
    IF              reduce using rule 115 (gen_vdim -> .)
    PRINT           reduce using rule 115 (gen_vdim -> .)
    READ            reduce using rule 115 (gen_vdim -> .)
    ID              reduce using rule 115 (gen_vdim -> .)
    LPAREN          reduce using rule 115 (gen_vdim -> .)
    CTESTR          reduce using rule 115 (gen_vdim -> .)
    CTEINT          reduce using rule 115 (gen_vdim -> .)
    CTEFLT          reduce using rule 115 (gen_vdim -> .)
    FALSE           reduce using rule 115 (gen_vdim -> .)
    TRUE            reduce using rule 115 (gen_vdim -> .)
    $end            reduce using rule 115 (gen_vdim -> .)
    SCOLON          reduce using rule 115 (gen_vdim -> .)
    RPAREN          reduce using rule 115 (gen_vdim -> .)
    COMMA           reduce using rule 115 (gen_vdim -> .)
    RBRCKT          reduce using rule 115 (gen_vdim -> .)
    RCURL           reduce using rule 115 (gen_vdim -> .)

    gen_vdim                       shift and go to state 287

state 285

    (20) dimlist -> LBRCKT CTEINT RBRCKT append_dim . dimlist
    (19) dimlist -> . empty
    (20) dimlist -> . LBRCKT CTEINT RBRCKT append_dim dimlist
    (104) empty -> .
    LBRCKT          shift and go to state 267
    COMMA           reduce using rule 104 (empty -> .)
    SCOLON          reduce using rule 104 (empty -> .)

    dimlist                        shift and go to state 288
    empty                          shift and go to state 269

state 286

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL . add_jquad
    (135) add_jquad -> .
    MAIN            reduce using rule 135 (add_jquad -> .)
    FUNCTION        reduce using rule 135 (add_jquad -> .)
    VAR             reduce using rule 135 (add_jquad -> .)
    RETURN          reduce using rule 135 (add_jquad -> .)
    WHILE           reduce using rule 135 (add_jquad -> .)
    IF              reduce using rule 135 (add_jquad -> .)
    PRINT           reduce using rule 135 (add_jquad -> .)
    READ            reduce using rule 135 (add_jquad -> .)
    ID              reduce using rule 135 (add_jquad -> .)
    LPAREN          reduce using rule 135 (add_jquad -> .)
    CTESTR          reduce using rule 135 (add_jquad -> .)
    CTEINT          reduce using rule 135 (add_jquad -> .)
    CTEFLT          reduce using rule 135 (add_jquad -> .)
    FALSE           reduce using rule 135 (add_jquad -> .)
    TRUE            reduce using rule 135 (add_jquad -> .)
    $end            reduce using rule 135 (add_jquad -> .)
    RCURL           reduce using rule 135 (add_jquad -> .)

    add_jquad                      shift and go to state 289

state 287

    (103) arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim . arrindex
    (102) arrindex -> . empty
    (103) arrindex -> . LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex
    (104) empty -> .
    LBRCKT          shift and go to state 248
    ASGN            reduce using rule 104 (empty -> .)
    FDIV            reduce using rule 104 (empty -> .)
    DIV             reduce using rule 104 (empty -> .)
    MULT            reduce using rule 104 (empty -> .)
    EXP             reduce using rule 104 (empty -> .)
    SUB             reduce using rule 104 (empty -> .)
    ADD             reduce using rule 104 (empty -> .)
    GTEQ            reduce using rule 104 (empty -> .)
    LTEQ            reduce using rule 104 (empty -> .)
    NOTEQ           reduce using rule 104 (empty -> .)
    EQ              reduce using rule 104 (empty -> .)
    GT              reduce using rule 104 (empty -> .)
    LT              reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)
    FUNCTION        reduce using rule 104 (empty -> .)
    VAR             reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    WHILE           reduce using rule 104 (empty -> .)
    IF              reduce using rule 104 (empty -> .)
    PRINT           reduce using rule 104 (empty -> .)
    READ            reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    LPAREN          reduce using rule 104 (empty -> .)
    CTESTR          reduce using rule 104 (empty -> .)
    CTEINT          reduce using rule 104 (empty -> .)
    CTEFLT          reduce using rule 104 (empty -> .)
    FALSE           reduce using rule 104 (empty -> .)
    TRUE            reduce using rule 104 (empty -> .)
    $end            reduce using rule 104 (empty -> .)
    SCOLON          reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RBRCKT          reduce using rule 104 (empty -> .)
    RCURL           reduce using rule 104 (empty -> .)

    arrindex                       shift and go to state 290
    empty                          shift and go to state 250

state 288

    (20) dimlist -> LBRCKT CTEINT RBRCKT append_dim dimlist .
    COMMA           reduce using rule 20 (dimlist -> LBRCKT CTEINT RBRCKT append_dim dimlist .)
    SCOLON          reduce using rule 20 (dimlist -> LBRCKT CTEINT RBRCKT append_dim dimlist .)


state 289

    (87) cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .
    MAIN            reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    FUNCTION        reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    VAR             reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    RETURN          reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    WHILE           reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    IF              reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    PRINT           reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    READ            reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    ID              reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    LPAREN          reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    CTESTR          reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    CTEINT          reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    CTEFLT          reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    FALSE           reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    TRUE            reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    $end            reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)
    RCURL           reduce using rule 87 (cond -> IF LPAREN expr RPAREN LCURL gen_cond_quad condst RCURL gen_egoto ELSE LCURL condst RCURL add_jquad .)


state 290

    (103) arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .
    ASGN            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    FDIV            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    DIV             reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    MULT            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    EXP             reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    SUB             reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    ADD             reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    GTEQ            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    LTEQ            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    NOTEQ           reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    EQ              reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    GT              reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    LT              reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    OR              reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    AND             reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    MAIN            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    FUNCTION        reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    VAR             reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RETURN          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    WHILE           reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    IF              reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    PRINT           reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    READ            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    ID              reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    LPAREN          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    CTESTR          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    CTEINT          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    CTEFLT          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    FALSE           reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    TRUE            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    $end            reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    SCOLON          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RPAREN          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    COMMA           reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RBRCKT          reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
    RCURL           reduce using rule 103 (arrindex -> LBRCKT push_oper_ctx expr RBRCKT pop_oper_ctx gen_vdim arrindex .)
